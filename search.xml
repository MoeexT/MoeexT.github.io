<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL 进阶</title>
    <url>/2018/01/05/database-MySQL/</url>
    <content><![CDATA[<blockquote><p>My day is done, and I am like a boat drawn on the beach, listening to the dance-music of the tide in the evening. 日间的工作完了，于是我像一只托在海滩上的小船，静静地听着晚潮跳舞的乐声。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h2 id="基础语法">基础语法</h2>
<h4 id="简介">简介</h4>
<p>数据库（Database）是按照数据结构来组织、存储和管理数据的仓库，是一款高效存储数据和提供分析计算功能的软件。它描述的是数据和信息之间的关系。<br> 众所周知，MySQL 为<em>关系型数据库</em>(Relational Database Management System)，这种数据库存储数据的模型称为“关系模型”，这种关系模型将生活中的每种数据抽象成一个表。</p>
<table>
<thead>
<tr class="header">
<th>表</th>
<th>table 是关系型数据库中基本存储单位</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>表里有行</td>
<td>row</td>
</tr>
<tr class="even">
<td>表里有列</td>
<td>column</td>
</tr>
</tbody>
</table>
<p>MySQL所使用的 SQL（结构化查询语言）语言是用于访问数据库的最常用标准化语言。主要分为四类：</p>
<table>
<thead>
<tr class="header">
<th>分类</th>
<th>说明</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DDL</td>
<td>定义语言</td>
<td>creat</td>
</tr>
<tr class="even">
<td>DML</td>
<td>操作语言</td>
<td>insert、delete、update</td>
</tr>
<tr class="odd">
<td>DCL</td>
<td>控制语言</td>
<td>grant、remove</td>
</tr>
<tr class="even">
<td>DQL</td>
<td>查询语言</td>
<td>select</td>
</tr>
</tbody>
</table>
<h4 id="登陆数据库">登陆数据库</h4>
<p>mysql [-D 所选择的数据库名] -h 主机名 -u 用户名 -p，括号中内容可选。</p>
<h4 id="prompt-提示符的修改">PROMPT 提示符的修改</h4>
<p>| 完整的日期  当前数据库  服务器名称  当前用户</p>
<h4 id="数据库操作">数据库操作</h4>
<p>create database name | 创建数据库 show databases | 查看所有数据库 drop database name | 删除某数据库 use xxx | 在下文使用某数据库 truncate 表明 | 清空表中的记录</p>
<h4 id="表操作">表操作</h4>
<p>create table 表名 (列名 数据类型 约束, 列名1···, ···约束) | 创建表，表名一般是以tb_ 开头 drop table 表名 | 删除表 alter table 表名 | 添加列 add/drop column | 添加/删除行</p>
<p>####约束</p>
<p>not null | 非空约束 unique | 唯一约束 primary key | 主键约束 foreigner key | 外键约束 checked | 检查约束</p>
<h4 id="增删查改crud">增删查改（CRUD）</h4>
<p>插入数据 | insert into 表名 (列名1,列名2,...) values (值1,值2,...); <br>insert into 表名 values (值1,值2,...,值N); <br>insert into 表名 xxx values (),(),(); 修改数据 | update 表名 set 列名 = 列值 ,列名1=列值1,...; 删除数据 | delete from 表名 where;</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- 基本查询语法</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tableName <span class="comment">--</span></span><br><span class="line"><span class="comment">-- where 子句功能是增加选择条件  </span></span><br><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>,... <span class="keyword">from</span> tb_name <span class="keyword">where</span> 条件 </span><br><span class="line"><span class="comment">/*where 的条件{</span></span><br><span class="line"><span class="comment">  &gt; &lt; &gt;= &lt;= = != &lt;&gt; </span></span><br><span class="line"><span class="comment">  is null is not null</span></span><br><span class="line"><span class="comment">  between and </span></span><br><span class="line"><span class="comment">  in (1,2,3,4)</span></span><br><span class="line"><span class="comment">  not in (1,2)</span></span><br><span class="line"><span class="comment">  并且 and 或者 or}*/</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="高级查询">高级查询</h2>
<h4 id="模糊查询">模糊查询</h4>
<p>select * from tb_name where usr_name like '条件'</p>
<p>% | 表示任意0个或多个字符。可匹配任意类型和长度的字符 <br> select * from tb_name where usr_name like 'A%' 会找出所有名字以‘A'开头的记录，可使用‘and’增加条件 _ | 表示任意单个字符，常用来限制表达式的字符长度语句 <br> select * from tb_name where usr_name like '<em>b' 会找出所有名字第二位是‘b’的记录 [] | 表示括号内所列字符中的一个 <br> select * from tb_name where usr_name like '</em>[a-c]' 会找出所有名字第二位为‘a、b、c’的记录 [^] | 表示不在括号所列之内的单个字符 <br> select * from tb_name where usr_name like '_[a-c]' 会找出所有名字第二位为不是‘a、b、c’的记录</p>
<h4 id="分组查询">分组查询</h4>
<p>语法：“<em>group by 要分组的列</em>，”列可以选择多个。一般都和聚合函数搭配使用，而聚合函数可以单独使用。<br> <em>聚合函数：</em> avg()、sum()、max()、min()、count()、group_concat()、select avg(sal)、depto from 表名 group by 列名 <br> 注意：查询结果里只能出现被分组的列和聚合的列</p>
<h4 id="排序">排序</h4>
<p>在查询语句后加 <em>order by 要排序的列 desc(或asc)，</em>其中 desc 为降序，asc 为升序。</p>
<h4 id="分页">分页</h4>
<p>limit m,n 限制， m=(页码-1)*n， topN 问题：先排序，再分页</p>
<h4 id="去重查询">去重查询</h4>
<p>关键字：<em>distinct，</em>去掉重复记录，在select后使用即可。</p>
<h4 id="子查询">子查询</h4>
<p>子查询就是在查询里写查询，一般用于解决一步不能查询求解的问题。其用法非常灵活，几乎可以写在查询的任何位置。<br> 语法：<br> 1. 子查询可以写在select后，作为查询结果 2. 子查询可以写在 from 后，作为查询源 3. 子查询可以写在 where 后，作为查询条件 4. 子查询可以使用主查询的资源，子查询要加括号包裹使用 5. 当子查询作为数据源在 from 后时，要起别名 6. 子查询还可以用在 update、insert、delete 里 7. <strong>having</strong> 限制条件和 where 的功能一样但是having是可以先分组再过滤，但where是先过滤再分组</p>
<h4 id="表连接">表连接</h4>
<p>表连接的作用是将多个表放在一起查询，解决一个表的数据不满足查询需求的问题。<br> 语法：<em>from a, b</em> <br> 需要注意的是，表连接会产生笛卡尔积，使用的时候一定要使用条件加以限制。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 编程基础</title>
    <url>/2018/01/06/linux-shell/</url>
    <content><![CDATA[<blockquote><p>The time of life is short; to spend that shortness basely, it would be too long. 人生短暂，若虚度年华，则短暂的人生就太长了。</p>
<footer><strong>威廉·莎士比亚</strong></footer></blockquote>
<a id="more"></a>
<h3 id="shell-介绍">Shell 介绍</h3>
<p>Shell本身是一种用C语言编写的程序，从用户的角度来看，Shell是用户与Linux操作系统沟通的桥梁。用户既可以输入命令执行，又可以利用 Shell脚本编程，完成更加复杂的操作。在Linux GUI日益完善的今天，在系统管理等领域，Shell编程仍然起着不可忽视的作用。深入地了解和熟练地掌握Shell编程，是每一个Linux用户的必修课。 <br>Linux的Shell种类众多，常见的有：Bourne Shell（/usr/bin/sh或/bin/sh）、Bourne Again Shell--Bash（/bin/bash）、C Shell（/usr/bin/csh）等等。每种Shell都有其特点，基本上，掌握其中一种就足够了。 在本文中，我们使用的Shell版本是Bash，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。</p>
<h3 id="shell-基本格式">Shell 基本格式</h3>
<p>利用vi/vim等文本编辑器编写 Shell 脚本的固定格式如下：<br></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">comments</span></span><br></pre></td></tr></tbody></table></figure>
<p>首行中的符号#!告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。如果首行没有这句话，在执行脚本文件的时候，将会出现错误。 后续的部分就是主程序，除第一行外，以#开头的行就是注释行，直到此行的结束。如果一行空间不够，可以在行尾加 " ，这个符号表明下一行与此行会合并为同一行。 <br> 编辑完毕后，将脚本存盘为 <code>filename.sh</code>，运行前首先将文件属性设为可执行：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chmod +x filename.sh</span><br><span class="line">./finename.sh  #本行代码执行脚本</span><br></pre></td></tr></tbody></table></figure>
<h3 id="hello-world">Hello World</h3>
<p>新学习一门语言的第一步大抵就是 Hello World 了吧，和 C 语言、Java 等不同，Shell 一句话就能做到：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">echo Hello World!</span><br></pre></td></tr></tbody></table></figure>
<p>其中 echo 语句要输出的内容可加引号也可不加引号，要输出多个内容时只需将内容依次写出来即可。</p>
<h3 id="变量">变量</h3>
<p><strong>注意：</strong>赋值号两边应该没有空格,否则 num 会被当做一个命令</p>
<p>Shell Script是一种弱类型语言，使用变量的时候无需首先声明其类型。新的变量会在本地数据区分配内存进行存储，这个变量归当前的Shell所有，任何子进程都不能访问本地变量。这些变量与环境变量不同，环境变量被存储在另一内存区，叫做用户环境区，这块内存中的变量可以被子进程访问。</p>
<p>Shell 有两种类型的变量：<br> <strong>临时变量：</strong>Shell程序内部定义的，作用范围仅限于本程序，对其他程序不可见。包括了用户自定义变量、位置变量。<br> <strong>永久变量：</strong>永久变量是环境变量，其值不随shell脚本的执行结束而消失。</p>
<p>变量的辅助命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">set  #查看系统中所有定义的变量</span><br><span class="line">unset 变量名  #删除变量</span><br><span class="line">env #用于显示环境变量及其取值</span><br><span class="line">export #用于将本地数据区中的变量转移到用户环境区</span><br></pre></td></tr></tbody></table></figure>
<p>变量可以直接定义：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">variable_name=variable_value</span><br><span class="line">echo $variable_name # $ 用于取变量的值</span><br></pre></td></tr></tbody></table></figure>
<p><code>$variable_name</code> 可以在引号中使用，这一点和其他高级语言是明显不同的。如果出现混淆的情况，可以用花括号来区分，例如：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">a=hello world</span><br><span class="line">echo "Hi, $as"</span><br></pre></td></tr></tbody></table></figure>
<p>就不会输出<code>Hi, hello world</code>，而是输出<code>Hi，</code>。这是因为 Shell 把 <code>$as</code> 当成一个变量，而 <code>$as</code> 未被赋值，其值为空。正确的方法是：</p>
<p><code>echo "Hi, ${a}s</code></p>
<p>使用单引号，单引号中的变量不会进行变量替换操作。 例如：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">ABC = “time is <span class="variable">$Date</span>”</span></span><br><span class="line">echo $ABC #输出：time is 2013-12-4</span><br><span class="line"><span class="meta">$</span><span class="bash">ABC = ‘time is <span class="variable">$Date</span>’</span></span><br><span class="line">echo $ABC 输出：time is $Date </span><br></pre></td></tr></tbody></table></figure>
<h3 id="算术运算">算术运算</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">((i=$j+$k))  # 等价于  i=`expr $j + $k` </span><br><span class="line">((i=$j-$k))  # 等价于  i=`expr $j - $k` </span><br><span class="line">((i=$j*$k))  # 等价于  i=`expr $j * $k` </span><br><span class="line">((i=$j/$k))  # 等价于  i=`expr $j / $k` </span><br></pre></td></tr></tbody></table></figure>
<h3 id="条件控制">条件控制</h3>
<p>if 语句：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">if [ 条件 ];</span><br><span class="line">  then</span><br><span class="line">elif …; </span><br><span class="line">  then</span><br><span class="line">else</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure>
<p>case 语句：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">case a in</span><br><span class="line">    "A") ;;</span><br><span class="line">    *) ;;  # 默认情况，相当于C语言的 default</span><br><span class="line"> esac </span><br></pre></td></tr></tbody></table></figure>
<p>与其他语言不同，Shell中if语句的条件部分要以分号来分隔。其中[]表示条件测试，常用的条件测试有下面几种：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[ -f "$file" ]  #判断$file是否是一个文件</span><br><span class="line">[ $a -lt 3 ]  #判断$a的值是否小于3，同样-gt和-le分别表示大于或小于等于</span><br><span class="line">[ -x "$file" ]  #判断$file是否存在且有可执行权限，同样-r测试文件可读性</span><br><span class="line">[ -n "$a" ]  #判断变量$a是否有值，测试空串用-z</span><br><span class="line">[ "$a" = "$b" ]  #判断$a和$b的取值是否相等</span><br><span class="line">[ cond1 -a cond2 ]  #判断cond1和cond2是否同时成立，-o表示cond1和cond2有一成立</span><br></pre></td></tr></tbody></table></figure>
<p>要注意条件测试部分中的空格。在方括号的两侧都有空格，在-f、-lt、=等符号两侧同样也有空格。如果没有这些空格，Shell解释脚本的时候就会出错。</p>
<h3 id="数组">数组</h3>
<p>数组声明和使用的简单用法：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">array=(a b c)</span><br><span class="line"><span class="meta">$</span><span class="bash">{array[0]} 通过下标去数组内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash">{array[*]} 取所有元素</span></span><br><span class="line"><span class="meta">$</span><span class="bash">{<span class="comment">#array[*]} 取长度</span></span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="循环">循环</h3>
<p><strong>for 循环：</strong></p>
<p>语法1：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">for n in a b c d </span><br><span class="line">    do </span><br><span class="line">    #  代码</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure>
<p>语法2：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">for((i=0;i&lt;100;i++))</span><br><span class="line">    do </span><br><span class="line">    #  代码</span><br><span class="line">done </span><br></pre></td></tr></tbody></table></figure>
<p><strong>while 循环：</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">while [ 条件 ]</span><br><span class="line">    do</span><br><span class="line">    #  代码</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:在变量自增的时候</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">   如果直接 <span class="variable">$num</span>+1 字符串拼接</span></span><br><span class="line">num=$(($num+1)) #当数字计算</span><br><span class="line">num=$[$num+1]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="函数">函数</h3>
<p>定义函数</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">function 函数名() { </span><br><span class="line">    函数体</span><br><span class="line">    echo $1 #  取第一个参数</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>调用函数: 函数名 参数1 参数2</p>
<p>echo 输出结果; $(函数名取结果)</p>
<h3 id="举个栗子">举个栗子</h3>
<p>这是代叔的一个练习</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">function round(){</span><br><span class="line">    dat=$((`date +"%s%N"`))</span><br><span class="line">    echo ${dat:0-8}</span><br><span class="line">}</span><br><span class="line">function random(){</span><br><span class="line">    dat=$((`date +"%s%N"`))</span><br><span class="line">    num=$(($dat % 10))</span><br><span class="line">    num1=$(($num % $(($2 - $1))))</span><br><span class="line">    num2=$(($num1 + $1))</span><br><span class="line">    echo $num2</span><br><span class="line">}</span><br><span class="line">function cost(){</span><br><span class="line">    if [ $1 -le 3 ];</span><br><span class="line">    then echo 8</span><br><span class="line">    elif [ $1 -gt 3 ];</span><br><span class="line">    then </span><br><span class="line">        num1=$[$1-3]</span><br><span class="line">        num2=$[$num1*2]</span><br><span class="line">        num3=$[$num2+8]</span><br><span class="line">        echo $[$num3]</span><br><span class="line">    fi</span><br><span class="line">}</span><br><span class="line">phone1=('137' '192' '135' '155' '188')</span><br><span class="line">phone2=`round 00000000 99999999`</span><br><span class="line">pho=`random 0 5`</span><br><span class="line">phone=${phone1[$pho]}$phone2</span><br><span class="line">mile=`random 1 21`</span><br><span class="line">time=$(date +'%Y-%m-%d %H:%M:%S')</span><br><span class="line">city=('哈尔滨' '北京' '上海' '大数据')</span><br><span class="line">harbin=('香坊区' '道里区' '道外区' '南岗区' )</span><br><span class="line">beijing=('海淀区' '朝阳区' '宣武区' '丰台区')</span><br><span class="line">shanghai=('奉贤区' '嘉定区' '宝山区' '黄浦区')</span><br><span class="line">bigdata=('Java' 'Python' 'Hadoop' 'Linux')</span><br><span class="line">money=`cost $mile`</span><br><span class="line">len=`random 0 4`</span><br><span class="line">len2=`random 0 4`</span><br><span class="line">case $len in</span><br><span class="line">"0") address1=${harbin[$len2]};;</span><br><span class="line">"1") address1=${beijing[$len2]};;</span><br><span class="line">"2") address1=${shanghai[$len2]};;</span><br><span class="line">"3") address1=${bigdata[$len2]};;</span><br><span class="line">esac</span><br><span class="line">address=${city[$len]}</span><br><span class="line">echo Time:$time Phone:$phone Address:$address$address1 Mile:$mile Sum:$money &gt;&gt; Taxi.log</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/2018/01/08/linux/</url>
    <content><![CDATA[<blockquote><p>The sands in your way beg for your aong and your movement, dancing water. Will you carry the burden of their lameness? 跳舞着的流水呀，在你途中的泥沙，要求你的歌声，你的流动呢。你肯挟瘸足的泥沙而俱下么？</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h2 id="linux操作系统简介">Linux操作系统简介</h2>
<p>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<p>Linux的特点：<br> + 安全、免费、开源 + 多用户（完全的，区别于Windows），一个用户的操作不会影响到其他用户 + 稳定、快速、占用资源少 + Java、大数据环境抖默认支持 Linux</p>
<h3 id="linux-的版本">Linux 的版本</h3>
<ol type="1">
<li>内核版：提供硬件抽象层、硬盘及文件系统控制及多任务功能的系统核心程序。就像手机的安卓系统一样，内核一般无法直接使用</li>
<li>发行版：由 Linux 内核与各种常用软件的集合产品。各个厂商会针对 Linux 内核发布自己的发行版
<ul>
<li>redHat: 经典红帽系列(RedHat Enterprise Linux, RHEL)，拥有极强的性能与稳定性。<em>好，贵</em></li>
<li>CentOS: 把 RHEL 重新编译并发布的免费版本，具有广泛的使用人群。<em>好，免费</em></li>
<li>Fedora: 红帽公司发布的桌面版系统，用户可以免费体验到最新的技术或工具。</li>
<li>openSUSE: 源自德国的一款著名的 Linux 系统，在全球范围内有着不错的声誉及市场占有率。</li>
<li>Gentoo: 具有极高的自定制性，操作复杂，适合具有一定经验的人使用。</li>
<li>Debian: 稳定性、安全性强，提供了免费的基础支持，可以良好地支持各种硬件架构</li>
<li>Ubuntu：派生自 Debian 系列，对新款硬件具有极强的兼容能力。和 Fedora 都是极其出色的桌面系统。</li>
</ul></li>
</ol>
<h3 id="安装-linux">安装 Linux</h3>
<p>Linux 可以通过虚拟机 VMware Workstation 安装。虚拟机是能够让用户在一台物理机上模拟出多个操作系统的软件，安装 Linux 前需要设置 CPU 以支持虚拟化。在<strong>任务管理器-性能-CPU</strong>一栏右下角可以查看当前CPU是否支持虚拟化，若不支持则可去BIOS中设置。</p>
<p>使用虚拟机的优点：不怕折腾，可以方便地还原到出错前的环境状态。</p>
<h2 id="使用">使用</h2>
<h3 id="linux-用户">Linux 用户</h3>
<p>root 用户具有最高权限，其他用户直接是安全的</p>
<h3 id="linux-目录">Linux 目录</h3>
<blockquote>
<p>/ 根目录 <br> /bin 存放必要的命令 <br> /boot 存放内核以及启动所需的文件 <br> /dev 存放设备文件 <br> /etc 存放系统配置文件 <br> /home 普通用户的宿主目录，用户数据存放在其主目录中 <br> /lib 存放必要的运行库 <br> /mnt 存放临时的映射文件系统，通常用来挂载使用。<br> /proc 存放存储进程和系统信息 <br> /root 超级用户的主目录 <br> /sbin 存放系统管理程序 <br> /tmp 存放临时文件 <br> /usr 存放应用程序，命令程序文件、程序库、手册和其它文档。 <br> /var 系统默认日志存放目录</p>
</blockquote>
<h3 id="远程登陆">远程登陆</h3>
<p>由于 Linux 在远程服务器上，一般不能直接在上面操作，所以有各种各样的客户端软件用来远程连接 Linux，比如 XShell、MobaXterm等。</p>
<p><strong>连接方法：</strong> <br> + 要知道 Linux 的 IP 地址、用户名以及对应的密码 + 虚拟机和本地机要能 ping 通</p>
<p><strong>注意：</strong>虚拟机开机是不启动网卡的，需要手动调成自动开机启动。</p>
<h3 id="修改-nat-连接方式">修改 Nat 连接方式</h3>
<p>Nat 方式是给虚拟机一个独立的网卡，特点是稳定、IP不变。<br> 虚拟机右键 -&gt; 设置 -&gt; 网络适配器 -&gt; 右侧选自定义-vmnet8 -&gt; 保存 <br> 虚拟机 -&gt; 编辑 -&gt; 虚拟网络适配器 -&gt; 更改设置 -&gt; 将 net8 改为 NAT 模式 -&gt; 保存</p>
<hr>
<h3 id="linux-命令">Linux 命令</h3>
<p><strong>Tip：</strong> <br> 命令查询<a href="http://man.linuxde.net/">网址</a> ，此网站仅供参考<br> Tab 键是命令提示</p>
<p><strong>基本语法：</strong> <em>命令名 -选项 参数</em></p>
<h4 id="cd-切换目录-注意区分相对路径和绝对路径的概念"><a href="http://man.linuxde.net/cd">cd</a> 切换目录 ，注意区分相对路径和绝对路径的概念</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd /    根目录</span><br><span class="line">cd ~    家目录</span><br><span class="line">cd a/b/c</span><br><span class="line">cd /a/b/c</span><br><span class="line">cd ..    返回上级目录</span><br><span class="line">cd ../..    返回上两级目录</span><br><span class="line">cd -    返回进入此目录之前所在的目录</span><br></pre></td></tr></tbody></table></figure>
<h4 id="ls-ll-查看目录"><a href="http://man.linuxde.net/ls">ls</a> ll 查看目录</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ls 选项 -a 全部 包括隐藏文件 </span><br><span class="line">           -R 级联显示 </span><br><span class="line">ll 详细查询 -h kb显示文件大小</span><br></pre></td></tr></tbody></table></figure>
<h4 id="mkdir-创建文件夹"><a href="http://man.linuxde.net/mkdir">mkdir</a> 创建文件夹</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir  创建文件夹 </span><br><span class="line">mkdir -p 连续创建多层文件夹</span><br></pre></td></tr></tbody></table></figure>
<h4 id="rm-删除文件"><a href="http://man.linuxde.net/rm">rm</a> 删除文件</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rm 删除文件 </span><br><span class="line">rm -r 删除文件夹</span><br></pre></td></tr></tbody></table></figure>
<h4 id="cp-复制文件"><a href="http://man.linuxde.net/cp">cp</a> 复制文件</h4>
<p><strong>说明：</strong> cp 命令可以复制到当前目录或其他目录，同时可以修改文件名 </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cp 要复制的文件名 目标目录/文件名 </span><br><span class="line">cp -r 复制目录</span><br></pre></td></tr></tbody></table></figure> #### <a href="http://man.linuxde.net/mv">mv</a> 移动文件<p></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mv 选项 -参数</span><br></pre></td></tr></tbody></table></figure>
<h4 id="touch-创建更新文件"><a href="http://man.linuxde.net/touch">touch</a> 创建/更新文件</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">touch 文件名  </span><br><span class="line">    已存在的文件名 更新</span><br><span class="line">    Linux不分扩展名</span><br></pre></td></tr></tbody></table></figure>
<h4 id="vivim-文本编辑"><a href="http://man.linuxde.net/vi">vi/vim</a> 文本编辑</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">i 写入模式 </span><br><span class="line">esc 编辑模式切换到命令模式 </span><br><span class="line">:-&gt; wq 保存并退出 </span><br><span class="line">:-&gt; q！强制退出 </span><br></pre></td></tr></tbody></table></figure>
<h4 id="cat-查看文本内容"><a href="http://man.linuxde.net/cat">cat</a> 查看文本内容</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cat a 查看 a 的内容</span><br><span class="line">cat a &gt;  b 将 a 的内容给 b</span><br><span class="line">cat a &gt;&gt; b 将 a 的内容追加给 b</span><br></pre></td></tr></tbody></table></figure>
<h4 id="tar-归档压缩"><a href="http://man.linuxde.net/tar">tar</a> 归档压缩</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">两个功能 一个压缩 一个是解压缩 </span><br><span class="line">选项  -c 压缩   </span><br><span class="line">      -x 解压缩</span><br><span class="line">      -f 文件 </span><br><span class="line">      -v 显示 </span><br><span class="line">压缩  tar -czvf 压缩后文件名 目标</span><br><span class="line">解压缩    tar -xzvf 目标名 </span><br><span class="line">            -xzvf 目标名 -C 目标目录</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop 的安装</title>
    <url>/2018/01/12/linux-hadoop1/</url>
    <content><![CDATA[<blockquote><p>My heart beats her waves at the shore of the world and writes upon it her signature in tears with the words, "I love thee." 我的心冲激着她的波浪在“世界”的海岸上，蘸着眼泪在上边写着她的题记：“我爱你。”</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h3 id="大数据与-hadoop-简单介绍">大数据与 Hadoop 简单介绍</h3>
<p><strong>什么是大数据？</strong></p>
<p>大数据的4V特性：海量的数据规模（volume）、快速的数据流转和动态的数据体系（velocity）、多样的数据类型（variety）和巨大的数据价值（value）。</p>
<p><strong>Hadoop</strong></p>
<p>Hadoop 解决的就是 数据的存储（HDFS）和计算分析（MapReduce）的问题。</p>
<p>分布式集群：集群里的每台机器叫一个节点，伪分布式只有一个节点。master 节点负责管理元数据 (Name Node)，slave 负责存储数据 (Data Node)。</p>
<p>保存数据块的信息的数据叫元数据，数据块默认为128MB(Hadoop2)，默认备份3份。 ### Hadoop 平台的搭建</p>
<p><strong>Hadoop 搭建前提：</strong>需要安装 jdk 和 SSH 免密。</p>
<p><strong>搭建步骤</strong></p>
<ol type="1">
<li>上传 Jdk 和 Hadoop 的包到服务器</li>
<li>解压</li>
<li>修改解压后文件夹名，方便以后升级而不用修改环境变量</li>
<li>配置环境变量，路径：用户家目录的 “.bashrc” <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">export JAVA_HOME=/home/groot/soft/jdk</span><br><span class="line">export HADOOP_HOME=/home/groot/soft/hadoop</span><br><span class="line">export PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:${PATH}</span><br></pre></td></tr></tbody></table></figure></li>
<li>修改配置文件，路径 /home/groot/hadoop/etc/hadoop/ &gt; <code>A: hadoop-env.sh 找到 “# export JAVA_HOME=${JAVA_HOME}” 字样，在下方修改 jdk 的安装路径</code> <br> &gt; <code>B: core-site.xml 配置访问的主机名和端口 (8020)，&lt;name&gt;fs.default.name&lt;/name&gt; &lt;value&gt;hdfs://master:8020&lt;/value&gt;</code> <br> &gt; <code>C: hdfs-site 配置备份数，指定元数据和数据块的存储目录</code> <br> &gt; <code>D: 用户名不一样的地方都需要改</code> <br> &gt; <code>E: 配置主机名：/etc/sysconfig/network 文件中，修改为 master/slave</code> <br> &gt; <code>F: 配置 IP 和主机名的映射：/etc/hosts 文件，master 和 slave 都要改</code> <br> &gt; <code>G: 配置 SSH 免密，假设在 master 节点家目录的 “.ssh” 文件夹</code> <br> &gt;&gt; <code>a: 生成密钥，ssh-keygen -t rsa -p ''</code> <br> &gt;&gt; <code>b: 这是本机免密，cat id_rsa.pub &gt;&gt; authorized_keys</code> <br> &gt;&gt; <code>c: 上传公钥到slave，scp id_rsa.pub groot@slave:/home/groot/.ssh/aa.pub</code> <br> &gt;&gt; <code>d: 免密登陆另一台机器，cat aa.pub &gt;&gt; authorized_keys</code> <br> &gt;&gt; <code>e: slave 节点重复 master 节点的做法</code> <br></li>
<li><code>./start-all.sh</code> 启动 Hadoop</li>
<li>关闭防火墙（需要 root 权限）：<code>service iptables stop</code> <br></li>
<li>浏览器访问50070端口进入 HDFS 的管理界面</li>
<li>jps 命令查看进程 主要是查看 Name Node 和 Data Node</li>
</ol>
<h3 id="hdfs-的-shell-命令">HDFS 的 shell 命令</h3>
<p><strong>操作 HDFS 的三种手段</strong></p>
<ol type="1">
<li>通过客户端管理界面查看</li>
<li>通过 HDFS 的 shell 命令</li>
<li>通过 Java 的 API</li>
</ol>
<p><strong>Shell 命令</strong></p>
<p>执行 Shell 命令的根目录应该是 <code>hdfs:192.168.208.132:8020/</code>，但是我们一般用 / 代替</p>
<ol type="1">
<li>创建目录：<code>hadoop fs -mkdir</code> 目录名</li>
<li>查看目录：<code>hadoop fs -ls</code></li>
<li>上传文件：<code>hadoop fs -put</code> 文件名 路径名</li>
</ol>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>HDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬取磁力链</title>
    <url>/2018/01/27/crawling-magnet-links-from-the-pirate-bay/</url>
    <content><![CDATA[<blockquote><p>The mystery of creation is like the darkness of night------it is great. Delusions of knowledge are like the fog of the morning. 创造的神秘，有如夜间的黑暗，——是伟大的。而知识的幻影，不过是晨间之雾。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h3 id="海盗湾简介">海盗湾简介</h3>
<p>大名鼎鼎的<a href="https://thepiratebay.cd/" title="The Pirate Bay"><strong>海盗湾</strong></a>，号称是全银河系最大的 BitTorrent 服务器，拥有数百万资源。是一个专门存储、分类及搜索 BitTorrent 种子文件的 <em>反版权</em> 网站，现今大多资源的提供形式为磁力链 (Magnet)。</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-27-the-pirate-bay-1.png" alt="main page"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-27-the-pirate-bay-2.png" alt="search page"></p>
<h3 id="设计思想">设计思想</h3>
<p>直接构造搜索页面的 url，把要查询的关键字替换掉浏览器查询的关键字，并借此发送请求。由于该网站构造比较简单，可以在搜索界面直接分析，找出磁力链接并进行翻页。</p>
<h3 id="代码">代码</h3>
<p><strong>使用注意：</strong>要搜索的内容需要写到 name_list （列表）里，作为变量传到 main() 模块里。</p>
<p>代码为了美观已将制表符替换为四个空格（页面制表符默认显示8个空格）。</p>
<p><strong>用到的模块</strong> </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> urllib2 <span class="keyword">as</span> ulb</span><br><span class="line"><span class="keyword">from</span>     <span class="number">4</span> <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span>     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">该模块接受要下载的url、用户代理（默认‘wswp’）、</span></span><br><span class="line"><span class="string">代理服务器（默认为空）和重新尝试次数（默认为2），</span></span><br><span class="line"><span class="string">返回该网页的内容和搜索内容的最大页数（只在第一次返回）。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url, user_agent=<span class="string">'wswp'</span>, proxy=<span class="literal">None</span>, num_retries=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"Downloading: "</span> + url)</span><br><span class="line">    headers = {<span class="string">'User-agent'</span>: user_agent}</span><br><span class="line">    request = ulb.Request(url, headers=headers)</span><br><span class="line">    opener = ulb.build_opener()</span><br><span class="line">    <span class="keyword">if</span> proxy:</span><br><span class="line">        proxy_params = {urlparse.urlparse(url).scheme: proxy}</span><br><span class="line">        opener.add_handler(ulb.ProxyHandler(proxy_params))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = opener.<span class="built_in">open</span>(request).read()</span><br><span class="line">    <span class="keyword">except</span> ulb.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">"Download Error:"</span> + e.reason)</span><br><span class="line">        html = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> num_retries &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">'code'</span>) <span class="keyword">and</span> <span class="number">500</span> &lt;= e.code &lt; <span class="number">600</span>:</span><br><span class="line">                <span class="keyword">return</span> download(url, user_agent, num_retries-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> url[-<span class="number">4</span>] == <span class="string">'0'</span>:</span><br><span class="line">        soup =     (html, <span class="string">"html5lib"</span>)</span><br><span class="line">        max_href_index = <span class="built_in">int</span>(soup.find(<span class="string">'div'</span>,align=<span class="string">"center"</span>).contents[-<span class="number">4</span>].string) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> html, max_href_index</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据给定的网页内容，转化为 BeautifulSoup 文档对象，搜索磁力链节点并以列表形式返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links</span>(<span class="params">html</span>):</span></span><br><span class="line">    soup =     (html, <span class="string">"html5lib"</span>)</span><br><span class="line">    <span class="built_in">list</span> = soup.find_all(<span class="string">'a'</span>, href=re.<span class="built_in">compile</span>(<span class="string">r'^magnet'</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个以关键字命名的文本文件，将下载的磁力链依次写入并保存。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">name_list</span>):</span>    </span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> name_list:</span><br><span class="line">        page = <span class="number">0</span></span><br><span class="line">        f = <span class="built_in">open</span>(name+<span class="string">'.txt'</span>,<span class="string">'a'</span>)</span><br><span class="line">        magnet_num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            url = <span class="string">"http://thepiratebay.cd/search/"</span> + name +<span class="string">"/"</span> + <span class="built_in">str</span>(page) + <span class="string">"/7/"</span></span><br><span class="line">            <span class="keyword">if</span> page == <span class="number">0</span>:</span><br><span class="line">                html, max_page_index = download(url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                html = download(url)</span><br><span class="line">            magnet_list = get_links(html)</span><br><span class="line">            <span class="keyword">for</span> magnet <span class="keyword">in</span> magnet_list:</span><br><span class="line">                f.write(magnet[<span class="string">'href'</span>]+<span class="string">'\n'</span>)</span><br><span class="line">                magnet_num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> page &lt; max_page_index:</span><br><span class="line">                page += <span class="number">1</span></span><br><span class="line">                print(<span class="string">r"Sleep for one second..."</span>)</span><br><span class="line">                time.sleep(random.random()*<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">"From "</span>+name+<span class="string">" get "</span>+<span class="built_in">str</span>(magnet_num)+<span class="string">" magnets"</span>)</span><br><span class="line">        f.flush()</span><br><span class="line">        f.close()</span><br><span class="line">        os.rename(name+<span class="string">'.txt'</span>,name+<span class="string">'-'</span>+<span class="built_in">str</span>(magnet_num)+<span class="string">'.txt'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><strong>总结</strong></p>
<p>移步<a href="https://github.com/moeext/Spiders/tree/master/PirateBay">Github</a>看代码，有惊喜</p>
<p>这好像是第一次比较正式的爬虫，代码比较 low，好在能用么么哒(づ￣ 3￣)づ</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>给 GitHub Pages 博客配置云解析</title>
    <url>/2018/01/28/cloud-dns-to-github-pages/</url>
    <content><![CDATA[<blockquote><p>Thank the flame for its light, but do not fotget the lampholder standing in the shade with coonstancy of patience. 谢谢火焰给你光明，但是不要忘了那执灯的人，他是坚忍地站在黑暗当中呢。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<p>云解析就是绑定域名，这个域名 “moeext.top” 是在阿里云注册的，两块钱😄 在 GitHub Pages 上搭好博客之后可以设置云解析。</p>
<h3 id="创建-cname-文件">创建 CNAME 文件</h3>
<p>首先在博客的根目录新建一个文件：“CNAME”，内容为要解析的域名：“moeext.top”，注意不要添加 http://或 www 等前缀。在 Windows 下如果不能建立没有后缀名的文件时，则可以 shift + 右键打开 Power Shell 输入 <code>echo moeext.top &gt; CNAME</code>以建立该文件。</p>
<h3 id="设置云解析">设置云解析</h3>
<p>在阿里云的控制台找到 “云解析 DNS” 一栏，在域名下添加解析如下：</p>
<figure>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-28-cloud-dns.png" alt="cloud-dns"><figcaption>cloud-dns</figcaption>
</figure>
<ul>
<li>设置主机记录www，记录类型为A，记录值是IP192.30.252.153。其中192.30.252.153是Github Pages服务器指定的IP地址，访问该IP地址即表示访问Github Pages</li>
<li>设置主机记录www，记录类型为A，记录值是IP192.30.252.154。</li>
<li>设置主机记录@，记录类型为CNAME，记录值是moeext.github.io.。表示将 http://moeext.top 这个主域名映射到 moeext.github.io</li>
</ul>
<p>添加完解析之后，等待大约十分钟，你的博客就可以访问了。</p>
]]></content>
      <categories>
        <category>GitHub Pages</category>
      </categories>
      <tags>
        <tag>GitHub Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>Python SMTP 发送邮件</title>
    <url>/2018/01/28/python-email/</url>
    <content><![CDATA[<blockquote><p>Like the metting of the seagulls and the waves we meet and come near. The seagulls fly off, the waves roll away and we depart. 我们如海鸥之于波涛相遇似的，遇见了，走近了。海鸥飞去，波涛滚滚地流开，我们也分别了。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h3 id="模块简介">模块简介</h3>
<p>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。这里发送邮件使用了 smtplib 和 email 两个模块。</p>
<p>发送邮件常用的模块： </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br></pre></td></tr></tbody></table></figure> ### 语法简介<p></p>
<p>smtplib 模块为发送邮件提供了一种很方便的途径，它对 SMTP 协议进行了简单的封装。其定义的 SMTP 客户端会话对象可使用 SMTP 或 ESMTP 侦听器守护程序向任何互联网机器发送邮件。</p>
<p>创建 smtp 对象的方法是<code>smtp=smtplib.SMTP([host [, port [, local_hostname]]])</code>，简单粗暴</p>
<ul>
<li>host：SMTP 服务器主机，可指定 IP 或 域名，可选。</li>
<li>port：一般情况下默认端口号为25.</li>
<li>local_hostname：如果 SMTP 服务器在本机上运行，则只需指定服务器地址为 localhost 即可。</li>
</ul>
<p>smtp 对象使用 sendmail 方法发送邮件：<code>smtp.sendmail(sender, receivers, msg.as_string())</code></p>
<ul>
<li>sender：发件人邮箱，字符串</li>
<li>receivers：收件人邮箱，列表</li>
<li>msg：特定格式的邮件</li>
</ul>
<p><strong>注意：</strong>msg是字符串，表示邮件内容。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要指定msg的格式。这个格式就是smtp协议中定义的格式。</p>
<h3 id="发送文本格式邮件">发送文本格式邮件</h3>
<p>这里使用新浪邮箱示例，QQ邮箱登录需要16位授权码，而且验证还过不去(lll￢ω￢)</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line">mail_host=<span class="string">"smtp.sina.com"</span>  <span class="comment">#设置服务器</span></span><br><span class="line">mail_user=<span class="string">"yuwancumiana@sina.cn"</span>  <span class="comment">#用户名</span></span><br><span class="line">mail_pass=<span class="string">""</span>  <span class="comment">#登陆密码</span></span><br><span class="line">sender = <span class="string">'yuwancumiana@sina.cn'</span></span><br><span class="line">receivers = [<span class="string">'moeext@gmail.com'</span>] </span><br><span class="line">message = MIMEText(<span class="string">'从windows发来的一封测试信'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)  <span class="comment"># 这里指定邮件内容</span></span><br><span class="line">message[<span class="string">'From'</span>] = <span class="string">"yuwancumiana@sina.cn"</span> </span><br><span class="line">message[<span class="string">'To'</span>] =  <span class="string">"鱼丸粗面"</span></span><br><span class="line">subject = <span class="string">'测试'</span> <span class="comment">#主题-title</span></span><br><span class="line">message[<span class="string">'Subject'</span>] = Header(subject, <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP() </span><br><span class="line">    smtpObj.connect(mail_host, <span class="number">25</span>)</span><br><span class="line">    smtpObj.login(mail_user,mail_pass)  </span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="built_in">print</span> <span class="string">u"邮件发送成功"</span></span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"Error: cannot send my email"</span></span><br><span class="line">    <span class="built_in">print</span> e</span><br></pre></td></tr></tbody></table></figure>
<p>接收到的邮件如图：<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-28-example1.png" alt="example-receiver"></p>
<h3 id="发送附件">发送附件</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SMTP_SERVER = <span class="string">'smtp.sina.com'</span></span><br><span class="line">SMTP_PORT = <span class="number">25</span></span><br><span class="line">sender = <span class="string">'yuwancumiana@sina.cn'</span> </span><br><span class="line">recipient = <span class="string">'moeext@gmail.com'</span></span><br><span class="line"></span><br><span class="line">msg = MIMEMultipart()</span><br><span class="line">msg[<span class="string">'Subject'</span>] = <span class="string">'Python 附件'</span></span><br><span class="line">msg[<span class="string">'To'</span>] = recipient</span><br><span class="line">msg[<span class="string">'From'</span>] = sender</span><br><span class="line">subject = <span class="string">'Python annex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 附件1，图片</span></span><br><span class="line">img = MIMEImage(<span class="built_in">open</span>(<span class="string">r'img/girl.jpg'</span>, <span class="string">'rb'</span>).read(), _subtype=<span class="string">'jpg'</span>)</span><br><span class="line">img.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename = <span class="string">'Girl.jpg'</span>)</span><br><span class="line">msg.attach(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附件2，文本</span></span><br><span class="line">part = MIMEText(<span class="built_in">open</span>(<span class="string">'test.txt'</span>,<span class="string">'rb'</span>).read(), <span class="string">'plain'</span>)</span><br><span class="line"><span class="comment"># part["Content-Type"] = 'application/octet-stream'</span></span><br><span class="line">part[<span class="string">"Content-Disposition"</span>] = <span class="string">'attachment; filename="test.txt"'</span></span><br><span class="line">part.set_payload(<span class="string">"text annex"</span>)</span><br><span class="line">msg.attach(part)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    session = smtplib.SMTP()</span><br><span class="line">    session.connect(SMTP_SERVER, <span class="number">25</span>)</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    session.ehlo()</span></span><br><span class="line"><span class="string">    session.starttls() 以TLS加密方式传输，可选</span></span><br><span class="line"><span class="string">    session.ehlo()</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    session.login(sender, <span class="string">'mq2020.'</span>)</span><br><span class="line">    session.sendmail(sender, recipient, msg.as_string())</span><br><span class="line">    <span class="built_in">print</span> <span class="string">u'发送成功'</span></span><br><span class="line">    session.quit()</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException,e:  </span><br><span class="line">    <span class="built_in">print</span> e </span><br></pre></td></tr></tbody></table></figure>
<p>效果图：<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-28-example2.png" alt="example-receiver"></p>
<h3 id="发送-html-附件">发送 HTML 附件</h3>
<p>这里使用的 HTML 是一个小爬虫爬到的数据，经简单包装后返回一个字符串，把字符串作为附件发送。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8 </span></span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> smtplib </span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> make_html_bs</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart </span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText    </span><br><span class="line"> </span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 第三方 SMTP 服务  </span></span><br><span class="line">mail_host=<span class="string">"smtp.sina.com"</span>  <span class="comment">#设置服务器  </span></span><br><span class="line">mail_user=<span class="string">"yuwancumiana@sina.cn"</span>    <span class="comment">#用户名  </span></span><br><span class="line">mail_pass=<span class="string">""</span>   <span class="comment">#密码</span></span><br><span class="line">  </span><br><span class="line">sender = <span class="string">'yuwancumiana@sina.cn'</span>  </span><br><span class="line">receivers = [<span class="string">'yuwancumian666@gmail.com'</span>,<span class="string">'2535257276@qq.com'</span>,<span class="string">'635936876@qq.com'</span>]  <span class="comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱  </span></span><br><span class="line">   </span><br><span class="line">mail = MIMEMultipart(<span class="string">"mixed"</span>)  </span><br><span class="line">mail[<span class="string">'From'</span>] = <span class="string">"yuwancumiana@sina.cn"</span>  </span><br><span class="line">mail[<span class="string">'To'</span>] = <span class="string">"鱼丸粗面"</span> </span><br><span class="line">mail[<span class="string">'Subject'</span>] = Header(<span class="string">'福利'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">message = MIMEText(<span class="string">"今日福利(windows)"</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">mail.attach(message)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    html = make_html_bs.get_html().encode(<span class="string">'utf-8'</span>) <span class="comment"># 这里使用的是另一个爬虫模块返回的数据，为 HTML 格式</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span> traceback.print_exc()</span><br><span class="line">    sys.exit(<span class="string">u"loading pages failed..."</span>)</span><br><span class="line">HTML = MIMEText(html, _subtype=<span class="string">'html'</span>, _charset=<span class="string">'utf-8'</span>)</span><br><span class="line">mail.attach(HTML)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line"></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    smtp.connect(mail_host)</span><br><span class="line">    smtp.login(mail_user, mail_pass)    </span><br><span class="line">    smtp.sendmail(sender, receivers, mail.as_string())</span><br><span class="line">    smtp.close()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">u"send mail success"</span>  </span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException,e:</span><br><span class="line">    <span class="built_in">print</span> e </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>结果（你猜猜内容是啥😄）：<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-28-example3.png" alt="exp3"></p>
<h3 id="总结">总结</h3>
<p>因为发送邮件的方式（不加密、SSL、TLS、）和类型（附件类型、附件头，附件内容）多种多样，邮件服务器总结起来也非常他喵的麻烦。我之前是做了不少的测试脚本，最后挑了一个经常用的。我对于这个 python 邮件的想法是：能用就成~O(∩_∩)O</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase 的安装配置</title>
    <url>/2018/01/29/bigdata-hbase/</url>
    <content><![CDATA[<blockquote><p>Take my wine in my own cup, friend. It lose its wreath of foam when poured into that of others. 在我自己的杯中，饮了我的酒吧，朋友。一倒在别人的杯里，这酒的腾跳的泡沫便要消失了。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h3 id="环境变量配置">环境变量配置</h3>
<p>在家目录的 “.bashrc” 文件里边配置环境变量，内容应当包括 JDK、Hadoop 和 Hbase。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">export JAVA_HOME=/home/user/bigdata/jdk</span><br><span class="line">export HADOOP_HOME=/home/user/bigdata/hadoop</span><br><span class="line">export HBASE_HOME=/home/user/bigdata/hbase</span><br><span class="line">export CLASS_PATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$HABASE_HOME/bin:${PATH}</span><br></pre></td></tr></tbody></table></figure>
<p>为了方便操作 hbase，以上已经添加了配置的 Hbase 环境变量： <em>HBASE_HOME</em> （非必须）</p>
<h3 id="配置文件">配置文件</h3>
<p><strong>hbase-env.sh</strong></p>
<p>在 hbase/conf 文件夹下，打开 hbase-env.sh，找到 jdk 的路径配置，添加 <code>export JAVA_HOME=/home/user/bigdata/jdk</code> 配置完 jdk 路径后，在下方可以看到配置 HBASE_CLASSPATH 的提示，添加 <code>export HBASE_CLASSPATH=/home/user/bigdata/hadoop/etc/hadoop</code> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-01-29-hbase-env.png" alt="exp"></p>
<p><strong>hbase-site.xml</strong></p>
<p>进入编辑模式，在 <code>&lt;configuration&gt;</code> 下添加以下字段：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/user/bigdata/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  <span class="comment">&lt;!-- Zookeeper下载包解压的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用hdfs：//// URI语法将hbase.rootdir从本地文件系统更改为HDFS实例的地址。 </span></span><br><span class="line"><span class="comment">	在此例中，HDFS在端口8020的本地主机上运行。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:8020/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node-a.example.com,node-b.example.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  <span class="comment">&lt;!-- 这里填写集群中的主机名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>此外，如果应用单独Zookeeper，需发更改/conf/hbase-env.sh下配置参数HBASE_MANAGES_ZK的值为true，即： <code>export HBASE_MANAGES_ZK=true</code></p>
<h3 id="hbase-启动停止监控">Hbase 启动、停止、监控</h3>
<p><strong>启动、停止</strong></p>
<p><code>start-hbase.sh(stop-hbase.sh)</code>，该文件在 hbase/bin 文件夹下，已经添加环境变量，所以可以在任意目录执行。（同 Hadoop）</p>
<p><strong>查看守护进程</strong></p>
<p>jps 命令查看守护进程，有 Hmaster 字样说明启动成功。</p>
<p><strong>浏览器页面查看</strong></p>
<p>在0.98.x以后的 Hbase 版本中，HBase Web UI使用的HTTP端口从主服务器的60010和每个RegionServer的60030更改为主服务器的16010和RegionServer的16030。</p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>HBase</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 制作词云</title>
    <url>/2018/02/02/python-word-cloud/</url>
    <content><![CDATA[<blockquote><p>The cloud stood humbly in a corner of the sky. The morning crowner it with splendor. 白云谦逊地站在天之一隅，晨光给他戴上了霞彩。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h3 id="what-is-词云">What is 词云</h3>
<p>“词云”（Wordle，Word cloud）就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，简单说就是由词汇组成类似云的彩色图片。</p>
<h3 id="准备依赖包">准备依赖包</h3>
<p>网上自动生成词云的网站有很多，在这里使用 “<a href="https://github.com/amueller/word_cloud" target="_blank">wordcloud</a>” 依赖，功能强大，简单易上手。若需要做中文的词云，需要中文分词工具“<a href="https://github.com/fxsjy/jieba" target="_blank">jieba</a> ”对文本解析。 安装 wordcloud 和 jieba：<code>pip install wordcloud</code>，<code>pip install jieba</code>。如果你安装了多个版本的 Python，则前者默认给Python3安装，若需要给python2 安装 wordcloud，使用 <code>py -2 -m pip install wordcloud</code>。</p>
<h3 id="英文词云">英文词云</h3>
<p>这个代码会生成两个词云作为对比，一个是随机颜色，一个是以照片底色为基准颜色的词云。在 WordCloud 方法中，可根据自身需要更改参数以取得最佳效果。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS, ImageColorGenerator</span><br><span class="line"></span><br><span class="line">text = <span class="built_in">open</span>(<span class="string">'txt/Maraba.txt'</span>).read() <span class="comment"># 选择文本</span></span><br><span class="line">alice_coloring = np.array(Image.<span class="built_in">open</span>(<span class="string">"sb.jpg"</span>)) <span class="comment"># 模板图片</span></span><br><span class="line">stopwords = <span class="built_in">set</span>(STOPWORDS)</span><br><span class="line">stopwords.add(<span class="string">"said"</span>)</span><br><span class="line"></span><br><span class="line">wc = WordCloud(background_color=<span class="string">"white"</span>, max_words=<span class="number">2000</span>, mask=alice_coloring,</span><br><span class="line">                stopwords=stopwords, max_font_size=<span class="number">80</span>, min_font_size=<span class="number">5</span>, </span><br><span class="line">                font_path=<span class="string">'CabinSketch-Bold.ttf'</span>,</span><br><span class="line">                random_state=<span class="number">42</span>)</span><br><span class="line">wc.generate(text)</span><br><span class="line">image_colors = ImageColorGenerator(alice_coloring)</span><br><span class="line"></span><br><span class="line">plt.imshow(wc, interpolation=<span class="string">"bilinear"</span>) <span class="comment"># 词云颜色随机</span></span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">wc.to_file(<span class="string">'sb1.png'</span>) <span class="comment"># 保存图片到文件</span></span><br><span class="line"></span><br><span class="line">plt.figure() <span class="comment"># 新建画布</span></span><br><span class="line">wc2 = wc.recolor(color_func=image_colors) <span class="comment"># 以图片底色作为词云底色</span></span><br><span class="line">plt.imshow(wc2, interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">wc2.to_file(<span class="string">'sb2.png'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<p>以下是效果图及对比：</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-04-sb.jpg" width="209" height="365" alt="害羞的刘洪宇"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-04-sb1.png" width="209" height="365" alt="随机彩色"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-04-sb2.png" width="209" height="365" alt="原图色"></div></div></div></div>
<h3 id="中文词云">中文词云</h3>
<p>开始运行行代码的时候，只显式了若干彩色的小矩形框（乱码，Python 的字符编码令人抓狂），中文词语显式不出来，网上搜博客说是 wordcloud 生成词语的字体问题。进入wordcloud.py 的源码，找字体库相关的代码<code>FONT_PATH = os.environ.get("FONT_PATH", os.path.join(os.path.dirname(__file__),"DroidSansMono.ttf"))</code>，将之改为支持中文的字体即可解决。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse <span class="keyword">as</span> analyse</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, STOPWORDS, ImageColorGenerator</span><br><span class="line"></span><br><span class="line">alice_coloring = np.array(Image.<span class="built_in">open</span>(<span class="string">"logo1024.jpg"</span>))</span><br><span class="line">stopwords = <span class="built_in">set</span>(STOPWORDS)</span><br><span class="line">stopwords.add(<span class="string">"said"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese</span>():</span></span><br><span class="line">    string = <span class="string">""</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'hotWords.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'GBK'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            string += i</span><br><span class="line">    liction = analyse.textrank(string, topK=<span class="number">50</span>, withWeight=<span class="literal">True</span>)</span><br><span class="line">    keywords = {}</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> liction:</span><br><span class="line">        keywords[word[<span class="number">0</span>]] = word[<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> keywords</span><br><span class="line">        </span><br><span class="line">wc = WordCloud(background_color=<span class="string">"white"</span>, max_words=<span class="number">2000</span>, mask=alice_coloring,</span><br><span class="line">                stopwords=stopwords, max_font_size=<span class="number">80</span>, min_font_size=<span class="number">2</span>, </span><br><span class="line">                <span class="comment">#font_path='CabinSketch-Bold.ttf',</span></span><br><span class="line">                random_state=<span class="number">42</span>)</span><br><span class="line">                </span><br><span class="line">wc.generate_from_frequencies(chinese())</span><br><span class="line">image_colors = ImageColorGenerator(alice_coloring)</span><br><span class="line"></span><br><span class="line">plt.imshow(wc.recolor(color_func=image_colors), interpolation=<span class="string">"bilinear"</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">wc.to_file(<span class="string">'weibo_logo1024.jpg'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-04-weibo-ch.jpg" width="320" height="320" alt="中文分词"></div><div class="group-picture-column" style="width: 50%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-04-weibo-en.jpg" width="320" height="320" alt="英文对比"></div></div></div></div>
<p>另附：下载微博热搜榜热搜词代码（默认下载三次）。简单的说，这个代码也是一个小爬虫，通过多次刷新热搜榜以获得较多的样本数量，将热搜词爬取下来保存为文本。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*- </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> ulb</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">url, proxy=<span class="literal">None</span>, num_retries=<span class="number">2</span></span>):</span></span><br><span class="line">    headers = {<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6'</span>}</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"Downloading: "</span>+url+<span class="string">"..."</span>)</span><br><span class="line">    request = ulb.Request(url=url, headers=headers)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = ulb.urlopen(request).read()</span><br><span class="line">    <span class="keyword">except</span> ulb.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">"Download Error: "</span> + <span class="built_in">str</span>(e.reason))</span><br><span class="line">        html = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> num_retries &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">'code'</span>) <span class="keyword">and</span> <span class="number">500</span> &lt;= e.code &lt; <span class="number">600</span>:</span><br><span class="line">                <span class="keyword">return</span> download(url, num_retries-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getList</span>():</span></span><br><span class="line">    url = <span class="string">'http://s.weibo.com/top/summary?cate=realtimehot'</span></span><br><span class="line">    html = download(url)</span><br><span class="line">    soup = bs(html, <span class="string">'lxml'</span>)</span><br><span class="line">    plist = soup.find_all(<span class="string">'p'</span>,class_=<span class="string">'star_name'</span>)</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> tag <span class="keyword">in</span> plist:</span><br><span class="line">        <span class="built_in">list</span>.append(tag.contents[<span class="number">1</span>].string)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">list</span> = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span> + getList()</span><br><span class="line">        <span class="built_in">list</span>.append(<span class="string">'\n'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'hotWords.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">            f.write(word+<span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>词云</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 数据类型</title>
    <url>/2018/02/06/hive-type-of-data/</url>
    <content><![CDATA[<blockquote><p>I cannot tell why this heart languishes in silence. It is for small needs it never asks, or knows or remembers. 我说不出这心为什么那样颓丧着，是为了它那不曾要求，不曾知道，不曾记得的小小的需要。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h2 id="基本数据类型">基本数据类型</h2>
<p>未完待续……</p>
<h2 id="复杂数据类型">复杂数据类型</h2>
<p>关系型数据库强烈不建议重复存储 我们接触过的大数据数据库比如 Hbase、Hive 不怕重复，但要求的是存储数据的文件不要太小。</p>
<p>类型 | 说明 | 举例 Array （数组） | 一组数据类型相同的值 | [1,2,3] Map（集合）| 一组 &lt;K, V&gt;，要求所有键类型相同，所有值类型相同 | {&lt;K, V&gt;, &lt;K, V&gt;} Struct（结构） | 一组不同字段，且每个字段的类型可以不同 | ("str", 1, 0)</p>
<h3 id="数组">数组</h3>
<p>假如我们有以下数据：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-array.jpg"></p>
<p>在 Hive 里创建一个表：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> loginArray(</span><br><span class="line">ip STRING,</span><br><span class="line">userid <span class="keyword">ARRAY</span><span class="operator">&lt;</span><span class="type">BIGINT</span><span class="operator">&gt;</span></span><br><span class="line">)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">','</span></span><br><span class="line">COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span></span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<p>然后导入数据：` LOAD DATA LOCAL INPATH '/home/user/test_data/login_array.txt' INTO TABLE loginArray```</p>
<p>查询数据：<code>SELECT id,userid FROM loginArray</code></p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-array-id-userid.jpg"></p>
<p>指定数组元素查询：</p>
<p><code>SELECT id,userid[0] FROM loginArray</code></p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-array-ip-userid%5B1%5D.jpg.jpg"></p>
<p>查询数组长度（-1为空）：<code>SELECT size(userid) FROM loginArray</code></p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-array-length.jpg"></p>
<h3 id="集合">集合</h3>
<h4 id="标准数据表处理">标准数据表处理</h4>
<p>给定测试数据：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-map-1.jpg"></p>
<p>数据表示某用户(id)，在某 IP 的主机上玩了哪些游戏以及游戏次数</p>
<p>开始建表：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TBALE loginmap(</span><br><span class="line">IP STRING,</span><br><span class="line">userid <span class="type">BIGINT</span>,</span><br><span class="line">gameinfo MAP<span class="operator">&lt;</span>STRING, <span class="type">INT</span><span class="operator">&gt;</span></span><br><span class="line">)</span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">','</span></span><br><span class="line">COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span></span><br><span class="line">MAP KEYS TERMINATED <span class="keyword">BY</span> <span class="string">':'</span></span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<p>导入数据：<code>LOAD DATA LOCAL INPATH '/home/user/test_data/loginmap1.txt' INTO TABLE loginmap;</code></p>
<p>插入数据后表结构如图：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-map-1-all.jpg"></p>
<h4 id="含脏数据的表处理">含脏数据的表处理</h4>
<p>测试数据：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-map-2.jpg"></p>
<p>导入数据时可以直接覆盖上一张表：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-map-2-all.jpg"></p>
<p>在查询某一个键时，因为数据的不统一（如“ wow” 和 “wow”，前者含空格）导致结果不同</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-map-different-info.jpg"></p>
<h3 id="结构">结构</h3>
<p>数据：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-struct.jpg"></p>
<p>建表：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> loginstruct(</span><br><span class="line">IP STRING,</span><br><span class="line">USRINFO STRUCT<span class="operator">&lt;</span>userid:<span class="type">BIGINT</span>, uname:STRING<span class="operator">&gt;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">','</span></span><br><span class="line">COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="string">'|'</span></span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure>
<p>导入数据：<code>LOAD DATA LOCAL INPATH '/home/user/test_data/login_array/loginstruct.txt' INTO TABLE loginstruct</code></p>
<p>插入后表信息：</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2018-02-06-struct-all.jpg"></p>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>大数据</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Python pyinstaller的使用</title>
    <url>/2018/03/16/how-to-use-pyinstaller/</url>
    <content><![CDATA[<blockquote><p>I think of others ages that floated upon the stream of life and love and death and are forgotten, and I feel the freedom of passing away. 我想起了浮泛在生与爱与死的川流上的许多别的时代，以及这些时代之被遗忘，我便感觉到离开尘世的自由了。</p>
<footer><strong>泰戈尔</strong><cite>飞鸟集</cite></footer></blockquote>
<a id="more"></a>
<h3 id="概述">概述</h3>
<p>安装: <code>pip install pyinstaller</code> <br> 用法: <code>pyinstaller -options script.py</code>，等 pyinstaller 编译完成之后，目录里面就多出两个文件夹: build 和 dist，其中 dist 里面就是打包的二进制文件，build 里是编译过程生成的中间件（作用不明）</p>
<p>选项 | 作用 -w，--windowed，--noconsole | 窗体exe文件(Windows Only) -c，--nowindowed，--console | 控制台exe文件(Windows Only) -F，--onefile | 把脚本打包成一个独立文件，打包一时爽，打开花五秒 -o DIR，--out=DIR | 设置spec文件输出的目录，默认在PyInstaller同目录 --version-file=file_version_info.txt，-v file | 给程序添加版权信息，需要指定一个版本信息文件 --icon=ico.ico | 添加图标，必须是 ico 文件 --upx-dir | 压缩可执行程序</p>
<h3 id="版权信息">版权信息</h3>
<p>在我的GitHub里有现成的版权信息文件: “file_version_info.txt”，修改后即可使用。 <a href="https://github.com/moeext/Python-Demo/tree/master/Fuck%20RedSpider" target="_blank">传送门</a><br> 利用 pyinstaller 内置的 grab_verson.py 或 pyi-grab_version.exe工具也可以自己获取其他 exe 文件的版权信息，修改后使用。</p>
<ul>
<li>grab_version.py: 目录:“Python27-packages”，用法: <code>python grab_version.py exe-file</code></li>
<li>pyi-grab_version.exe: 目录: “Python27-grab_version.exe”，用法: <code>pyi-grab_version exe-file version-file</code></li>
<li>举个栗子说明: exe-file（C:.exe），version-file（version.txt）</li>
<li>版权信息文件中，#号起注释作用，如果生成的 version.txt 没有正确换行，在修改的时候需要注意正确区分注释与版权信息</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>年记——一月</title>
    <url>/2019/01/19/first-month/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>January</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="第一周">第一周</h2>
<p><strong>2019.1.1 元旦</strong></p>
<p>大晚上和懒子还有他可爱的大一妹子吃鸡，截图。</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2018_12_31_iOS.png"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_01.png"></p>
<p>习主席的新年贺词</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_01_President_Xi_iOS.png"></p>
<p><strong>2019.1.2 今天毕业论文开题</strong></p>
<p>这是做的PPT</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_02_PPT_iOS.png"></p>
<p>打印开题报告出来，看到了一只小松鼠，但是没拍到</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_02_school_road_squirrel.jpg"></p>
<p><strong>2019.1.3 今天回家了</strong></p>
<p>和狗子们出来吃饭，但只拍到一个，不知道是不是最后一次</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_03_meal_night.jpg"></p>
<p>狗哥的白葡萄酒，被我和山东、内蒙的瓜分</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_03_wine_Brother_Doggy.jpg"></p>
<h2 id="第二周">第二周</h2>
<p>中间回家好几天没拍照……</p>
<p><strong>2019.1.7 超市</strong></p>
<p>和我爸去上官超市买的黄豆和各种米，遇见了我奶奶、我妈、我姨</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_07_grains_soy_milk.jpg"></p>
<p><strong>2019.1.8 周总理逝世43周年</strong></p>
<p>周总理逝世43周年，谨记。感谢周总理</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_08_Premier_Zhou.png"></p>
<p><em>黑豆</em></p>
<p>茏茏给黑豆拍的照，总感觉它巨乖；有小窝之前【可怜 <span class="github-emoji"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 】 VS 有小窝之后【舒呼 <span class="github-emoji"><span>😬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 】</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_08_HeiDou.jpg"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_08_nest_HeiDou.jpg"></p>
<p><strong>2019.1.9 她忘了我的样子，居然</strong></p>
<p>这就是我</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_09_myself.jpg"></p>
<p>这是给黑豆吃的打虫药，肠虫清</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_09_pill_for_HeiDou.jpg"></p>
<p>春妹老师给我的任务，百十张图片硬是手动截完了，然后收获了一句“好”</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_09_pictures_of_tiger_from_chunMei.jpg"></p>
<p><strong>2019.1.10 科普</strong></p>
<p>逛知乎随手下载的素材，纯当科普</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_10_zhihu_dinosaur.jpg"></p>
<p><strong>2019.1.11 给我妈拍照</strong></p>
<p>公告栏上要用，那个王八蛋打电话要，觉得等不及了就自己拍了，那晚他俩看起来都不开心</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_11_nurse_photo_mom.jpg"></p>
<p><strong>2019.1.13 二姑</strong></p>
<p>想要一个高一点的桌子，网上的看起来总觉得有点低（其实并不低，后来我觉得），然后我二姑让我去他家，说给我做。其实就是住了两三天，除了睡觉干活的时候暖和，基本上都在瑟瑟发抖。这是在烧水的时候给明明拍的照（我就是当素材拍的）。</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_13_MingMing.jpg"></p>
<h2 id="第三周">第三周</h2>
<p><strong>2019.1.15 蚂蚁森林</strong></p>
<p>蚂蚁森林的敖特根大叔和2019第一小生命——小牛的合照</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_15.jpeg"></p>
<p><strong>2019.1.17</strong></p>
<p>逗我爸开心，给他玩我妈刚买来的被子固定器。</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_17_quilt_holder_from_mom.jpg"> <video src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_17_playing_quilt_holder.mp4" controls="controls" width="270px" height="480px"> </video></p>
<p><strong>2019.1.18</strong></p>
<p>我今天炒的炒饭，嗯，味道真的可以</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/%E5%B9%B4%E8%AE%B0-2019-01/2019_01_18_fried_rice.jpg"></p>
<h2 id="第四周">第四周</h2>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>年记</tag>
      </tags>
  </entry>
  <entry>
    <title>睡前小故事——Day 1</title>
    <url>/2019/01/19/short-stories-before-bed1/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>来自知乎的暖心故事</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="知乎用户-芒果">知乎用户-芒果</h2>
<p><a href="https://www.zhihu.com/question/35048612/answer/72024360">原文链接</a></p>
<p>“爷爷，学校里同学说世界上没有龙没有妖怪什么都没有，都是别人编的。”少女坐在爷爷身边，嘟着嘴抱怨到。</p>
<p>“别听他们的，丫头，这个世界上明明就有啊，不仅有龙，还有勇敢的骑士，能驯服龙的骑士。”爷爷布满皱纹的手轻抚着少女的头发，眼里满满都是慈爱，“但是龙骑士是很骄傲的，他只会出现在相信他的人的世界里。”</p>
<p>“可是，我怎么跟他们解释，他们都不信，说我骗人，笑我幼稚长不大。”女孩几乎快哭出来了</p>
<p>“去睡吧，丫头，明天起来，大家就会相信你了。”爷爷看着少女落寞回房的背影，好像下定了什么决心。</p>
<p>“去哪儿老头子？”奶奶听到大门打开的声音，从房间里走了出来。</p>
<p>“去见一个老朋友，好多年没见了，想跟它好好叙叙旧。”爷爷说着别了别腰间锈迹斑斑的铁剑。</p>
<p>“你啊，从以前就是暴脾气！待会儿可别吓着那些小家伙了，他们毕竟还是孩子。”奶奶转身回房，出来的时候手上拿着一条破旧的有点褪色的披风，一边嗔怪着，一边给爷爷系上。</p>
<p>“我心里有数，这些小鬼竟敢嘲笑囡囡，看我今天不好好收拾他们！”爷爷忿忿不平的唠叨着，头也不回的出门了。</p>
<p>那天晚上，几乎全城的人都看到一头巨大的飞龙在雪白的月光下呼啸而过，龙背上依稀有个人影，拿着剑，背后的披风猎猎作响，奶奶也在窗口看着那巨龙咆哮腾飞，一如当年那个少年，也是这样手执长剑，布衣披风，骑着巨龙从天而降，长笑不羁，神采飞扬。</p>
<hr>
<h2 id="知乎用户-曹丰泽">知乎用户-曹丰泽</h2>
<p><a href="https://www.zhihu.com/question/35048612/answer/154027314">原文链接</a></p>
<p>在不久以前，大约四千年吧。那时还没有国家，人类生活在部落里。在文明的西部边缘，有一个部落。部落的名字已经不得而知，我们就叫它二狗子寨吧。</p>
<p>那时，天气逐渐转冷，庄稼收成不好，他们养的猪也被吃光了。二狗子寨的男人们只好出去打猎。家里没有牲畜需要照料，死孩子也都已经装进了陶罐里，女人们只好蹲在寨子门口唠闲嗑，并祈祷男人们能打到鹿回来。</p>
<p>天气阴沉沉的，部落里的祭司说要有不好的事情发生。因此，蹲在寨子门口唠闲嗑的女人们都抱着孩子回家了。她们用仅剩的小米磨碎做成面条，放在锅里煮好，等待男人回家。我编不下去了，总之大洪水冲进了这块德性的洼地，他们住的这种半地穴式建筑瞬间被水淹没，女人们把孩子护在身下，然后被埋进了河水带来的泥土之中，直到四千年后考古队员将她们和孩子们挖了出来。就像这样。</p>
<p><img src="https://pic3.zhimg.com/80/v2-922052f01fb5ef739924cfd5707e775a_hd.png"> <img src="https://pic1.zhimg.com/80/v2-e8bbbb01efdf223c45a597714b658dd0_hd.jpg"></p>
<p>你看，女人们的本能啊，是多么的令人动容。她们生命的最后一刻想的，就是保护她们的孩子啊。 所以我们什么时候开始造娃</p>
<hr>
<h2 id="知乎用户-有很多人">知乎用户-有很多人</h2>
<p><a href="https://www.zhihu.com/question/35048612/answer/75555181">原文链接</a></p>
<p>黄小狼刚出生没多久，妈妈嫌弃他毛色难看，就把他赶出家门自生自灭去了。真是糟糕，黄小狼还不会人生最重要的技能—偷鸡呢。</p>
<p>他实在饿的不行了，穿过树林，偷偷来到了村里的农户家，准备看看有没有机会可以逮着一只鸡。他悄悄地躲在门口的树后，看着院子里一只油亮亮、毛皮鲜亮光鲜的大公鸡顶着鲜红的鸡冠，骄傲地迈着步伐，在院子里仿佛巡视领地一般走了走去。</p>
<p>大公鸡眼尖，发现了他，一点也不害怕，突然立起了脖子边的毛，如同离弦的箭一样射了过来，要啄黄小狼。于是，两人开启了追逐战。</p>
<p>时间日复一日地划过，黄小狼每天都要去找大公鸡锻炼自己抓鸡的本领。可是在一个阳光灿烂的午后，美丽的大公鸡不见了。或者说让大公鸡骄傲的毛皮不见了。原来大公鸡的毛被农户扒走做了鸡毛掸子。他靠近被拔了毛的大公鸡，大公鸡也没像以前一样奋起直追，而是有些恹恹地撇了他一眼，跺着步伐走开了。</p>
<p>第二天，黄小狼叼着鸡毛掸子又来找大公鸡了。他一身是伤，昨天趁夜偷鸡毛掸子地时候惊醒了农户，黑灯瞎火地挨了几下打。</p>
<p>黄小狼甩了甩他秃秃地尾巴，讨好地对大公鸡笑了笑：你看，我进步啦，起码学会了偷鸡毛。大公鸡梗着脖子半晌，突然把头凑近了黄小狼，黄小狼以为大公鸡又要啄他。吓得闭了眼，大公鸡却只是用尖尖地嘴小心的、轻轻地蹭了他一下。</p>
<hr>
<h2 id="知乎用户-李阿木">知乎用户-李阿木</h2>
<p><a href="https://www.zhihu.com/question/35048612/answer/126442751">原文链接</a></p>
<p>“亲爱的，我昨晚做了一个梦，梦见一个很大很大的池塘喔，里面有一条小金鱼和一朵小荷花快乐地生活着。”</p>
<p>“哇，有多大呀？”</p>
<p>“恩，大概跟我们家一样大吧”</p>
<p>“那也没有很大呀…”</p>
<p>“将来会很大的喔！”</p>
<p>“嗯～”“故事开始洛…”</p>
<p>(第一天)</p>
<p>风清月朗，星光洒满了湖面。</p>
<p>小金鱼在小荷花的周围游来游去，欢快地打着滚，吐着泡泡。</p>
<p>小荷花站在水里，一会看看天上的月亮，一会看看水里的月亮，心里开心极了。</p>
<p>小金鱼游呀游，也不知道游了多少圈，终于忍不住上前打了声招呼：</p>
<p>“你好呀，小荷花。”</p>
<p>“你好呀，小金鱼。”小荷花笑着摆了摆手，说：“你看今晚的月光好美呀！”</p>
<p>小金鱼抬头看了看月亮，又看了看小荷花，不由地摇起了尾巴，开心了起来。</p>
<p>(第二天)</p>
<p>春风温柔，浅浅地吹着湖面。</p>
<p>小金鱼在小荷花的周围游来游去，欢快地打着滚，吐着泡泡。</p>
<p>小荷花嘻嘻笑着，欢快地拍着手，她还从来没有见过这么可爱会吐心形泡泡的小金鱼呢。</p>
<p>吐完了泡泡的小金鱼，又变成了正经的小金鱼，他会一本正经地问：“喂，小荷花，你看着我干什么，你是不是想亲我呀？”</p>
<p>小荷花羞红了脸，气哼哼地不理小金鱼。</p>
<p>小金鱼又围着小荷花游来游去，一会打滚，一会倒立，一会吐泡泡。</p>
<p>小荷花被小金鱼气笑了，瞪了他一眼，问：</p>
<p>“你看着我干什么？你是不是想亲我呀？”</p>
<p>小金鱼点了点头，很认真地看着小荷花，说：“是呀！想了好久了！”</p>
<p>然后小金鱼跳起来，亲了小荷花一下。</p>
<p>天边的晚霞一不小心就飞到了小荷花的脸上。</p>
<p>(第三天)</p>
<p>阳光温柔，天空中偶尔有白云飘过。</p>
<p>小金鱼在小荷花的周围游来游去，欢快地打着滚，吐着泡泡。</p>
<p>“喂，小金鱼，你昨天为什么要亲我呀？”</p>
<p>“嘿嘿，我想跳都跳了，不亲一下不是白跳了吗”</p>
<p>小金鱼吐完一串心形泡泡，欢快地摇起了尾巴。</p>
<p>“喂，小金鱼，我跟你说你不可以像昨天那样随便亲女孩子喔！”小荷花瞪着眼睛，气哼哼地说道。</p>
<p>“喂，跳起来也是很累的，我怎么可能随便亲别人喔！”</p>
<p>“哼！你肯定也偷偷亲过别人，不理你啦”小荷花气哼哼地转过头去。</p>
<p>小金鱼于是又围着小荷花游来游去，一会打滚，一会倒立，一会吐泡泡。</p>
<p>“喂，小荷花，你再不理我，我又要跳起来给你一个么么哒洛。”</p>
<p>“扑哧！”香气弥漫了整个湖面。</p>
<p>(第四天)</p>
<p>柳絮温柔，漫天地飘荡着。</p>
<p>小金鱼在小荷花的周围游来游去，欢快地打着滚，吐着泡泡。</p>
<p>小荷花被心形的泡泡环绕在中间，一会看看湖面上飘荡的柳絮，一会看看小金鱼，笑弯了腰。小金鱼欢快地摇着尾巴，时不时跳起来就给小荷花一个么么哒。</p>
<p>“喂，你整天跳来跳去不累吗？”</p>
<p>“喜欢你怎么会累？”</p>
<p>(第五天)</p>
<p>细雨温柔，在湖面上点出涟漪。</p>
<p>小金鱼在小荷花的周围游来游去，欢快地打着滚，吐着泡泡。</p>
<p>“小金鱼，下雨了喔，今晚看不到月亮了。”</p>
<p>雨越下越大，雨点在湖面上跳跃着，好像一闪一闪的星空。</p>
<p>小金鱼在水里吐着泡泡，抬头看见雨中的小荷花，像极了初见时那晚的月光，洁白淡雅。</p>
<p>“不会呀，今晚月光很美！”小金鱼看着小荷花，认真的说。</p>
<p>小荷花也看着小金鱼，那个雨夜香气四溢。</p>
<p>(第六天)</p>
<p>大雨倾盆也温柔，池塘水位上涨，小荷花也浮在了水面上。</p>
<p>小金鱼在小荷花的周围游来游去，欢快地打着滚，吐着泡泡。</p>
<p>“小金鱼，有你真好，下雨天我也可以很开心。”</p>
<p>“小荷花，其实我有点喜欢下雨天啦！”</p>
<p>“你是鱼耶当然喜欢下雨天啦！”</p>
<p>“不是的！”小金鱼游到了小荷花的身边，拉着她的手温柔地说道：“因为下雨天呀，我不用跳就可以亲到你了！”</p>
<p>说完，小金鱼就抱着小荷花亲了一下，满满的爱意从鼓鼓的眼睛溢了出来。</p>
<p>(第七天)</p>
<p>亲爱的，余生还很长，我们不必急着一晚上把故事都听完，乖，来睡觉觉了，我们睡着了，小荷花和小金鱼就又可以在一起了呀，乖啦！</p>
<p>女：嘻嘻，好的吧，不过你要告诉我为什么你是小金鱼我是小荷花咧？</p>
<p>男：因为这样，我就可以游到你的心底了呀！</p>
<p>女：嘻嘻，那我也要去你的心底呀！</p>
<p>男：被辣么多心形泡泡环绕，你以为你还跑的掉！</p>
<p>晚安，写给女票的睡前小故事。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>睡前小故事</tag>
      </tags>
  </entry>
  <entry>
    <title>睡前小故事——Day 2</title>
    <url>/2019/01/20/short-stories-before-bed2/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>来自知乎的暖心故事</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="知乎用户-泊安">知乎用户-泊安</h2>
<p><a href="https://www.zhihu.com/question/35048612/answer/102599532">原文链接</a></p>
<p>小公主喜欢上了小木匠</p>
<p>小木匠认真的在为小公主打造梳妆台</p>
<p>小公主托着腮趴在旁边</p>
<p>眼里都是小星星</p>
<p>小木匠把梳妆台做完了</p>
<p>小公主不舍得小木匠走</p>
<p>“可以让梳妆台有一颗粉红色的心么”</p>
<p>“我还想要一个双层的大大的首饰盒”</p>
<p>“还有，还有，你可以给我做一个木头的小兔子么”</p>
<p>小木匠点点头</p>
<p>小木匠叮叮当当做了一个呆呆的小兔子</p>
<p>又叮叮当当做了一个漂亮的首饰盒</p>
<p>小木匠把小兔子递给小公主小公主抱着小兔子，摸摸首饰盒</p>
<p>“你还没有给我做粉红色的心呢”</p>
<p>小木匠撇撇嘴</p>
<p>“我的心已经给你了，你为什么还要心呢”</p>
<p>小公主眨眨眼</p>
<p>“你什么时候把心给我了” “你给我星星的时候”</p>
<hr>
<h2 id="知乎用户-乔小巴">知乎用户-乔小巴</h2>
<p><a href="https://www.zhihu.com/question/36632066/answer/68468017">原文链接</a></p>
<h3 id="故事一.偷偷地想你o_o">故事一.偷偷地想你~O(∩_∩)O~</h3>
<p><strong>吃饭篇~</strong></p>
<p>大兔子和小兔子一起吃饭。小兔子捧着饭碗，对大兔子说：“想你。”</p>
<p>“我不就在你身边吗？”大兔子说。</p>
<p>“可我还是想你。”小兔子咂吧咂吧嘴，“我每吃一口饭都要想你一遍，所以，我的饭又香又甜，哪怕是我最不喜欢的卷心菜。”</p>
<p>大兔子不说话，只是低着头继续吃饭。</p>
<p><strong>散步篇~</strong></p>
<p>大兔子和小兔子一起散步。</p>
<p>小兔子一蹦一跳，对大兔子说：“想你。”</p>
<p>“我不就在你身边吗？”</p>
<p>大兔子说。“可我还是想你。”</p>
<p>小兔子踮起脚尖，“我每走一步路都要想你一遍，所以，再长的路走起来都轻轻松松，哪怕路上满是泥泞。”</p>
<p>大兔子不说话，只是慢悠悠地继续走路。</p>
<p><strong>看月亮篇~</strong></p>
<p>大兔子和小兔子坐在一起看月亮。</p>
<p>小兔子托着下巴，对大兔子说：“想你。”</p>
<p>“我不就在你身边吗？”大兔子说。</p>
<p>“可我还是想你。”小兔子歪着脑袋，“我每看一眼月亮都要想你一遍，所以，月亮看上去那么美，哪怕乌云遮挡了它的光芒。”</p>
<p>大兔子不说话，只是抬起头继续看月亮。</p>
<p><strong>睡觉篇~</strong></p>
<p>大兔子和小兔子该睡觉了。</p>
<p>小兔子盖好被子，对大兔子说：“想你。”</p>
<p>“我不就在你身边吗。”大兔子说。“可我还是想你。”小兔子闭上眼睛，“我每做一个梦都要想你一遍，所以，每个梦都是那么温暖，哪怕梦里出现妖怪我都不会害怕。”</p>
<p>大兔子不说话，躺到床上。</p>
<p><strong>想你篇~嘘…</strong></p>
<p>小兔子睡着了，大兔子轻轻亲吻小兔子的额头。</p>
<p>“每天每天，每分每秒，我都在想你，悄悄地想......”</p>
<h3 id="故事二.我爱你要比你爱我更多更长嘘__">故事二.我爱你，要比你爱我更多更长~嘘……(*^__^*)</h3>
<p>小兔子要上床睡觉了，</p>
<p>它紧紧抓著大兔子的长耳朵，要大兔子好好地听它说。</p>
<p>“猜猜我有多爱你？”小兔子问。</p>
<p>“噢！我大概猜不出来。”大兔子笑笑地说。</p>
<p>“我爱你这么多。”小兔子把手臂张开，开得不能再开。</p>
<p>大兔子有双更长的手臂，它张开来一比，说：“可是，我爱你这么多。”</p>
<p>小兔子动动右耳，想：“嗯，这真的很多。”</p>
<p>“我爱你，像我举的这么高，高得不能再高。”小兔子说，双臂用力往上撑举。</p>
<p>“我爱你，像我举的这么高，高得不能再高。”大兔子也说。</p>
<p>哦，小兔子想，真糟，他又比我高。</p>
<p>小兔子又有个好主意，它把脚顶在树干上倒立了起来。它说：“我爱你到我的脚趾头这么多。”</p>
<p>大兔子一把抓起小兔子的手，将它抛起来，飞得比它的头还高，说：“我爱你到你的脚趾头这么多。”</p>
<p>小兔子大叫：“我爱你，一直到过了小路，在远远的河那边。”</p>
<p>大兔子说：“我爱你，一直到过了小河，越过山的那一边。”</p>
<p>小兔子想，那真的好远。它揉揉红红的两眼，开始困了，想不出来了；</p>
<p>它抬头看著树丛后面那一大片的黑夜，觉得再也没有任何东西比天空更远的了。</p>
<p>大兔子轻轻抱起频频打著呵欠的小兔子，小兔子闭上了眼睛，在进入梦乡前，喃喃说：“我爱你，从这里一直到月亮。”</p>
<p>“噢！那么远，”大兔子说。</p>
<p>真的非常远、非常远。</p>
<p>大兔子轻轻将小兔子放到叶子铺成的床上，低下头来，亲亲它，祝它晚安。</p>
<p>然后，大兔子躺在小兔子的旁边，小声地微笑著说：“我爱你，从这里一直到月亮，再绕回来。”</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>睡前小故事</tag>
      </tags>
  </entry>
  <entry>
    <title>睡前小故事——Day 3</title>
    <url>/2019/01/22/short-stories-before-bed3/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>来自知乎的暖心故事</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="知乎用户-wangshiyin">知乎用户-Wangshiyin</h2>
<p><a href="https://www.zhihu.com/question/59017055/answer/210115111">原文链接</a></p>
<p><strong>1.</strong></p>
<p>有一天，小鱼问大鱼：大…鱼…大…鱼，你…喜…欢…吃…什…么…样…的…小…鱼…呀…？</p>
<p>大鱼说：我…喜…欢…吃…讲话…慢…的…小…鱼…，</p>
<p>小鱼说：哦我造了。</p>
<p><strong>2.</strong></p>
<p>两只小蜜蜂呀。飞到花丛中。一只飞得高，一只飞得低。</p>
<p>飞得高的那只对飞得低的那只说：“你这只low bee”</p>
<p><strong>3.</strong></p>
<p>为什么海水是蓝色的呀。</p>
<p>因为海洋里有很多小鱼</p>
<p>它们会：blue blue blue ～</p>
<hr>
<h2 id="知乎用户-关山月">知乎用户-关山月</h2>
<p><a href="https://www.zhihu.com/question/59017055/answer/219229734">原文链接</a></p>
<blockquote>
<p>(◕ˇ∀ˇ◕)谢谢大家捧场。。</p>
</blockquote>
<p><strong>1.</strong></p>
<p>有一个长得特别胖的柠檬，别的柠檬都是椭圆的，尖尖的，可是他却特别圆，跟小和尚的头似的。</p>
<p>他特别的苦恼！于是每天不喝水，不吃饭的减肥，想把自己饿瘦成别的柠檬的样子。</p>
<p>但是到了别的柠檬都变黄了，成熟了，他还是那么胖</p>
<p>于是他就等啊等饿啊饿，立志把自己饿得那么瘦才成熟。</p>
<p>直到很久很久以后。。他才发现。。。自己。。。原来。。。是个柚子(≖_≖ )</p>
<p><strong>2.</strong></p>
<p>她偷偷用小号拜了男神为师父</p>
<p>整天问他</p>
<p>“师父，我该把眼插在哪？”</p>
<p>“师父，我该什么时候放大？”</p>
<p>男神不太懂辅助位置怎么打，每次都支支吾吾打发过去。</p>
<p>直到有一天，她问了好多问题男神糊弄不过去了，就说，“徒儿你等等，我问问你师娘。”</p>
<p>这一刻她觉得自己竟卑微的可怜。</p>
<p>没过多久QQ大号响起</p>
<p>是男神问她</p>
<p>“在吗？那个。。你会玩辅助吗。。？”</p>
<p><strong>3.</strong></p>
<p>有个小仙女喜欢把云朵捏成各种各样的形状</p>
<p>这天她捏出了一群动物花草，却又突然一挥手把他们打散了</p>
<p>路过的蝴蝶问她:</p>
<p>“你为什么不开心啊？”</p>
<p>仙女说:</p>
<p>“没有朋友和我一起玩。”</p>
<p>蝴蝶说:</p>
<p>“管风的小神仙喜欢你很久了”</p>
<p>仙女奇怪的问：</p>
<p>“你怎么知道？”</p>
<p>蝴蝶默默的笑着说：</p>
<p>“要不你以为你每次捏云朵的时候，为什么从来没有破坏的风”( ﹡ˆoˆ﹡ )</p>
<p><strong>4.</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-68c90cd4b904479a87ba7471946cfaae_hd.jpg"></p>
<p><strong>5.</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-786e79e002767dff3c4cdf94db8d9dbe_hd.jpg"></p>
<p><strong>6.</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-057dc3d307cc5a7a300b9f583bc08eee_hd.jpg"></p>
<p><strong>7.</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-5ffd4bd027a13884d8fb0ab9290544a7_hd.jpg"></p>
<p><strong>8.</strong></p>
<p><img src="https://pic4.zhimg.com/80/v2-4afde27c560ece5b92561678899d46f7_hd.jpg"></p>
<p><strong>9.</strong></p>
<p><img src="https://pic1.zhimg.com/80/v2-4a9fd53f83efb8f5d375b3688a1f915c_hd.jpg"></p>
<blockquote>
<p><strong>唉。。差点忘记说了(⋟﹏⋞)故事来源于网络且是多年收藏，图片呢来自微博，已经是规范转载了！那就请各位小可爱们！别再举报了！做人！要厚道呀！</strong></p>
</blockquote>
<blockquote>
<p>喜欢吗?。。 喜欢。。。</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>睡前小故事</tag>
      </tags>
  </entry>
  <entry>
    <title>睡前小故事——Day 4</title>
    <url>/2019/01/23/short-stories-before-bed4/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>来自知乎的暖心故事</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="知乎用户-行歌">知乎用户-行歌</h2>
<p><a href="https://www.zhihu.com/question/59017055/answer/182887133">原文链接</a></p>
<p><strong>一、</strong></p>
<p>嘎嘣豆是宠物店里最调皮的仓鼠。</p>
<p>它每天晚上都能悄悄的打开自己的笼子逃出来，跑到嘎嘣脆的笼子里一头拱进食盒里大吃特吃。</p>
<p>嘎嘣脆是宠物店里最不爱动弹的猫。</p>
<p>它每天只干三件事，吃饭，睡觉，看嘎嘣豆吃它的猫粮。</p>
<p><strong>二、</strong></p>
<p>“我很想知道，老板是不给你饭吃吗？”某天晚上嘎嘣脆看着挣扎在猫粮里的嘎嘣豆，一脸同情。</p>
<p>“当然不是！”嘎嘣豆挥舞着小短腿费了半天的功夫才从食盒里坐起来，“我只是很喜欢猫粮的味道好的吧。”</p>
<p>“所以你吃成了一个球。”嘎嘣脆一脸嫌弃的伸出他高贵的猫爪子，戳了戳他圆滚滚的肚子。</p>
<p><strong>三、</strong></p>
<p>嘎嘣脆是宠物店里最挑食的猫，他不喜欢吃一粒一粒硬邦邦的猫粮。</p>
<p>“廉价的混合物配不上我高贵的胃。”</p>
<p>这是他的原话，虽然他说完之后遭到了隔壁英短无情的嘲笑。但是，王要有王的尊严，也要有王的气度。</p>
<p>所以嘎嘣脆也不屑于计较，但是因为挑食他一天到晚都懒洋洋的，毛也没有光泽。</p>
<p>来店里买猫的顾客走了一拨又一拨，身为高贵的布偶猫他却迟迟没能被挑中。</p>
<p>“这只猫不会得了什么病吧？”顾客跟店员窃窃私语。</p>
<p><strong>四、</strong></p>
<p>嘎嘣豆是宠物店最调皮的仓鼠。</p>
<p>自从他学会了越狱，每天晚上就孜孜不倦的去拜访隔壁，美其名曰增进感情。</p>
<p>他去吃嘎嘣脆的猫粮是有代价的，他把一条条的小鱼干鱿鱼干拖进嘎嘣脆的笼子里，好进行平等的交流互换。</p>
<p>嘎嘣脆在天天夜宵的滋补下精神见好，毛也逐渐变得光滑。</p>
<p><strong>五、</strong></p>
<p>嘎嘣豆是宠物店里最胖的仓鼠。</p>
<p>嘎嘣脆是宠物店里最漂亮的猫。</p>
<p>“都说了给它少喂一点！怎么还是这么胖！”</p>
<p>嘎嘣豆依然天天晚上过来吃猫粮，只是吃完之后要回去多跑几遍跑轮。</p>
<p>嘎嘣脆咬着小鱼干忍不住问他：“跑跑轮累不累呀？”</p>
<p>“嘿呀都累死鼠了。”嘎嘣豆躺在食盒里，四只小爪伸展开瘫成一个大字。</p>
<p>“什么时候他们能给你你换一个口味的猫粮啊，我吃的都要吐了呢。”嘎嘣豆捂着自己鼓鼓的腮帮子，叹了口气。</p>
<p><strong>六、</strong></p>
<p>嘎嘣豆从那一天开始再也不过去吃猫粮了。</p>
<p>因为嘎嘣脆伸出他的桌子拍了拍嘎嘣豆的头。</p>
<p>“那个，老鼠，你说实话，你是不是根本不喜欢吃猫粮。”</p>
<p>“不要叫我老鼠！我是仓鼠！仓鼠！仓鼠！而且我有名字！嘎嘣豆！”</p>
<p>“额……好吧……嘎嘣豆。。”</p>
<p>暴跳如雷的小仓鼠叉着腰瞪着他：“这还差不多……猫粮……猫粮还好吧。。”</p>
<p>嘎嘣脆若有所思：“他们是不是说我不吃饭肯定是得病了要关起来？”</p>
<p>小仓鼠不说话，瞪着黑色的小眼珠看着他拼命的眨。</p>
<p><strong>七、</strong></p>
<p>嘎嘣豆一直是一只乖巧的小仓鼠，他懂事以来的日常就是越狱和欺负不爱吃饭的病猫嘎嘣脆，有一次他好奇尝了一口猫粮，咸滋滋，好难吃。</p>
<p>直到有一天他越狱跑到休息室，听到老板说，那只病歪歪的猫再不见好就先关到后院吧。</p>
<p>噫，后院都是攻击性强没人肯要的宠物，嘎嘣豆打了个哆嗦。</p>
<p>那一天开始嘎嘣豆开始费尽心思的去偷储藏室里的小鱼干给嘎嘣脆吃，顺便要消灭他挑食的证据，一大碗猫粮也要毁尸灭迹。</p>
<p>怎么办呢，只能吃掉。</p>
<p><strong>八、</strong></p>
<p>嘎嘣脆终于改掉了挑食的坏毛病，他越来越健康，长的也更加漂亮，店主开心的要拿小鱼干奖励它，打开柜子却发现里面空荡荡。</p>
<p>真傻。</p>
<p>嘎嘣豆隔着笼子，对他挤眉弄眼的笑。</p>
<p><img src="https://pic4.zhimg.com/80/v2-8ff3a0e1b2ca5bd7f3e5a0c2bdfb74ef_hd.jpg"></p>
<blockquote>
<p>特别喜欢这个系列的仓鼠嘤嘤嘤</p>
</blockquote>
<p><img src="https://pic2.zhimg.com/80/v2-582f4926eaca6725abf134a2b60cfe49_hd.jpg"></p>
<hr>
<h2 id="知乎用户-挽挽酱">知乎用户-挽挽酱</h2>
<p><a href="https://www.zhihu.com/question/59017055/answer/211044928">原文链接</a></p>
<p>一个女孩让我帮她寄快递，</p>
<p>给了我一个空纸箱让我打包。</p>
<p>我好奇的问她:</p>
<p>"这是寄给谁的?"</p>
<p>她说:"喜欢很久的男生。" 我懵了一下:</p>
<p>"可是里面没有东西啊。"</p>
<p>她说:"有些东西，只有我自己能看见。"</p>
<p>我一听更懵逼了，</p>
<p>神秘地问她到底是什么。</p>
<p>她说:"一箱情愿。"</p>
<p>后来，</p>
<p>男生把一个箱子还给了她。</p>
<p>两箱情愿，一箱欢喜。</p>
<blockquote>
<p>Best wishes！( ´罒`*)✧"</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>睡前小故事</tag>
      </tags>
  </entry>
  <entry>
    <title>睡前小故事——Day 5</title>
    <url>/2019/01/23/short-stories-before-bed5/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>来自知乎的暖心故事</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="知乎用户-川戈">知乎用户-川戈</h2>
<p><a href="https://www.zhihu.com/question/59017055/answer/357749734">原文链接</a></p>
<p><strong>1、</strong></p>
<p>书生觉得自己倒霉透了。</p>
<p>进京赶考的路上，书生看到了一群山贼正在打劫车队。饱读诗书的他立刻上前仗义执言，训得匪徒哑口无言。</p>
<p>“现在收手还来得及，否则我立刻就去报官！你们可以保持沉默，但你们说的每一句话，都将成为呈堂证供！”书生指点江山，意气风发。</p>
<p>“你说得对！”为首的蒙面人诚恳地说，“我的确没考虑到这一点。”</p>
<p>书生昂首挺胸，心想最近自己果然口才大有进步，却突然听到了蒙面人的一句话。</p>
<p>“小的们，把这个书生一块儿绑回去，灭口！”</p>
<p><strong>2、</strong></p>
<p>书生昂首挺胸，心想最近自己果然口才大有进步，却突然听到了蒙面人的一句话。</p>
<p>“小的们，把这个书生一块儿绑回去，灭口！”</p>
<p>“喂，那个书生，我看你下午那番话，有几分歪才，留寨子里当个军师如何？”</p>
<p>书生挺直了腰，面无惧色：“劫生辰纲的事不怪你们，但想让我同流合污，没门！”</p>
<p>美娇娘嫣然一笑：“那就柴房里关着，关到同意为止呗！”</p>
<p>书生这下急了，进京赶考可耽误不得啊！他连忙服软：“这位大王……”</p>
<p>谁知美娇娘突然翻了脸，狠狠弹了书生一个脑瓜崩，疼得他流出眼泪来。</p>
<p>“不要叫我大王，要叫我女王大人！”</p>
<p><strong>3、</strong></p>
<p>小喽啰们发现，寨主最近特别爱往柴房跑。</p>
<p>本来只想劝书生在山寨入伙，但聊着聊着，美娇娘却发现，和书生聊天太他娘的有意思啦！</p>
<p>“你这样不好，”书生皱起了眉头，“【他娘的】，这是脏话，女孩子家，要温柔才像样！”</p>
<p>“温柔？那是弱女子才干的事儿！我可是要当巾帼英雄的人！”美娇娘柳眉一竖，就要发火。</p>
<p>“谁说女英雄就要讲脏话！你知道花木兰吗？你知道穆桂英吗？梁红玉、樊梨花、聂隐娘……”</p>
<p>美娇娘的眼睛里逐渐冒出了小星星：“你懂的好多，快给我讲讲！”</p>
<p>书生得意一笑：“行，那我就给大王你讲讲……”</p>
<p>“啪”一个脑瓜崩弹在了书生脑门上。</p>
<p>“说了多少次，不要叫我大王，要叫我女王大人！”</p>
<p><strong>4、</strong></p>
<p>美娇娘逐渐成了书生的迷妹，他的住处啊，从柴房变成了厢房。</p>
<p>这天，美娇娘推开了书生的房门：“我仔细想过了，你的确不适合当我的军师。”</p>
<p>书生喜出望外：“这么说，我可以下山了？”</p>
<p>美娇娘摇了摇头：“我觉得，你还是当我的压寨夫君更好一点。”</p>
<p>书生两眼一黑，差点晕了过去。虽然美娇娘长得好看，心眼不坏，劫富济贫也算个侠盗，对自己也很好——可她是个山贼啊，我家书香门第，怎么能嫁给山贼呢？</p>
<p>啊呸，我怎么能用“嫁”这个字，应该是“娶”才对。</p>
<p>书生摇了摇头：“对不起，我心仪的姑娘，必须知书达理，才华胜过我才行。”</p>
<p>美娇娘丹凤眼一瞪：“武功胜过你行不行？”</p>
<p>书生一咬牙，闭上了眼睛：“宁为玉碎不为瓦全！”</p>
<p><strong>5、</strong></p>
<p>“不就是才华吗？我现在就去读书！”美娇娘一言不发出了院子，连夜绑来了城里的老秀才，悬梁刺股苦读了三天三夜，“我就不信我学不来！”</p>
<p>第四天，她叹着气踹开了书生的房门：“算了，读书太难了，你还是下山吧。”</p>
<p>书生临走时，突然觉得有些难过。他犹豫了片刻，还是回过头说了一句：“青山不改，绿水长流。大王，后会有期！”</p>
<p>“说了不要叫我大王……”美娇娘拳头刚举起来，又突然停住，背过了身子悄悄擦泪，“算了，随你怎么叫吧。”</p>
<p><strong>6、</strong></p>
<p>书生一进城，就被官兵抓了起来。</p>
<p>原来，有人举报他是山贼的同伙，一起劫了生辰纲。书生无处伸冤，直接关进了大牢，赶考的事儿也泡了汤。</p>
<p>问斩前一天晚上，火光大作，嘈杂万分。牢房大门被一刀劈开，一道人影进来，背着书生就走，一路杀出重围，回了山寨。</p>
<p>书生这才注意到，原来救自己的，是美娇娘。</p>
<p>看着她一身是伤，却依然笑颜如花，书生叹了口气：“没办法，这下只能当你的狗头军师了。”</p>
<p>“只是军师而已吗？”美娇娘有些失望，“难道一定要才华胜过你，才肯当我压寨夫君？”</p>
<p>“唉，真拿你没办法，”书生无奈地叹了口气，“明天开始，我教你读书。”</p>
<p><strong>7、</strong></p>
<p>书生半夜出来赏月，无意中听到美娇娘在和老秀才商量什么。</p>
<p>“读书太难了，有没有快一点的办法？”</p>
<p>……</p>
<p>“我明白了，这就证明，他的才华远不如我，他就只能乖乖从了我！”</p>
<p>听着美娇娘豪迈大笑，书生冷哼一声。</p>
<p>我凭本事单的身，想作弊？不可能！</p>
<p><strong>8、</strong></p>
<p>第二天，美娇娘坏笑着推开书生的门：“喂，我来考考你，若是答错了，你便乖乖从了我！”</p>
<p>书生一摆手：“出招吧。”</p>
<p>“你写个回字出来。”“回字有四种写法，大王，你要的是哪一种？”</p>
<p>美娇娘一愣：“算了算了，你还是画个龙给我看看。”</p>
<p>书生得意一笑：“龙有虺虬螭蛟多个品种，大王，你要看哪样？”</p>
<p>美娇娘抓耳挠腮，涨红了脸，原地踱了两圈，突然一拍桌子，拽着书生把他推倒在卧室的床上。</p>
<p>“说了多少次，叫我女王大人！”</p>
<hr>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>睡前小故事</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS使用指南</title>
    <url>/2019/03/02/how-to-start-a-vps/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>默念二十四字社会主义核心价值观</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h1 id="安装shadowsocksr">安装ShadowsocksR</h1>
<p>使用root用户登录，运行以下命令：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装ShadowsocksR</span></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 卸载ShadowsocksR</span></span><br><span class="line">./shadowsocksR.sh uninstall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装 BBR</span></span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/moeext/how-to-start-a-new-VPS/master/tcp.sh</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></tbody></table></figure>
<h2 id="多用户配置示例">多用户配置示例</h2>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>:<span class="string">"[::]"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:{</span><br><span class="line">        <span class="attr">"10657"</span>:<span class="string">"***"</span>,</span><br><span class="line">        <span class="attr">"10658"</span>:<span class="string">"***"</span>,</span><br><span class="line">        <span class="attr">"10659"</span>:<span class="string">"***"</span>,</span><br><span class="line">        <span class="attr">"10660"</span>:<span class="string">"***"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">120</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>:<span class="string">"origin"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>:<span class="string">"plain"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>:<span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>:<span class="number">1</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="更改python软连接">更改Python软连接</h1>
<p>查看已安装python版本 <code>ls /usr/bin</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">rm /usr/bin/python</span><br><span class="line">ln -s /usr/bin/python3.5 /usr/bin/python</span><br></pre></td></tr></tbody></table></figure>
<h1 id="定时任务-crontab">定时任务 crontab</h1>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="comment">#30 22 * * * python ~/email/pymail.py &gt;&gt; ~/email/pymail.log</span></span><br><span class="line"><span class="comment"># 修改默认编辑器</span></span><br><span class="line">select-editor</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages——Hexo配置笔记</title>
    <url>/2019/03/05/start-hexo/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>Hello Hexo!</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h1 id="问题">问题</h1>
<h2 id="markdown中不能使用变量">Markdown中不能使用变量</h2>
<p><code>Ruby-Jekyll</code>环境下，是可以直接在markdown中插入yaml中定义的变量的，所以就可以把OSS(COS)存储的图片链接放到yaml里，方便管理。从Jekyll转到Hexo发现在markdown中使用变量是行不通的，但是知道了半点解决办法——注册插件：<a href="https://github.com/hexojs/hexo/issues/2756">GitHub</a>和<a href="https://www.zhihu.com/question/264598381">知乎</a>的解决方案。在此方案下我做了一些不完全的测试： 1. 在<code>source/_data</code>目录下新建文件夹并有序存放yaml文件，在<code>hexo generate</code>过程中是找不到yaml文件的。 2. 把yaml放在根目录下，能找到文件，但是找不到变量的键，1中也会有此种情况。 3. 直接把数据放在<code>站点配置文件</code>中，可用找到变量并引用其值，但是只能硬编码，不能动态地找到变量，因为js中的变量类型是字符串</p>
<figure class="highlight javascript"><figcaption><span>themes/next/scripts/include-variable.js</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">hexo.extend.tag.register(<span class="string">'variable'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>{</span><br><span class="line">    <span class="comment">// 这里 传入的变量 args[0] 类型是字符串，所以不能和 js 语句相连接，如：hexo.config.data.args[0]</span></span><br><span class="line">    <span class="comment">// `hexo g`过程中打印下列信息，也就是执行该文件</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"------------------variable---------------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(args[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">console</span>.log(hexo.config.url)</span><br><span class="line">    <span class="built_in">console</span>.log(hexo.config.data.iOS)</span><br><span class="line">    <span class="comment">// return `img src="` + args[0] + `" /`;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">``</span>+hexo.config.data.iOS;</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure>
<h2 id="关于代码块附加说明的样式">关于代码块附加说明的样式</h2>
<p>在代码高亮主题<code>night bright</code> 下，使用<code>{% codeblock %} {% endcodeblock %}</code>添加说明后，页面显示字体颜色和背景相近，不容易分辨，可以更改css样式来解决这一问题：</p>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-05-codeblock-caption.jpg" class="" width="540" height="280">
<figure class="highlight styl"><figcaption><span>public/css/main.css</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="variable">$highlight_theme</span> == <span class="string">"night bright"</span></span><br><span class="line">  <span class="variable">$highlight</span>-<span class="attribute">background</span>   = <span class="number">#000000</span></span><br><span class="line">  <span class="variable">$highlight</span>-current-line = <span class="number">#2a2a2a</span></span><br><span class="line">  <span class="variable">$highlight</span>-selection    = <span class="number">#424242</span></span><br><span class="line">  <span class="variable">$highlight</span>-foreground   = <span class="number">#555</span>  <span class="comment">/* #eaeaea */</span></span><br><span class="line">  <span class="variable">$highlight</span>-comment      = <span class="number">#969896</span></span><br><span class="line">  <span class="variable">$highlight</span>-red          = <span class="number">#d54e53</span></span><br><span class="line">  <span class="comment">// ……</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="插入图片">插入图片</h2>
<h3 id="图片并排">图片并排</h3>
<div class="note success">
            <p>更新到hexo-cli v4.2.0 已修复</p>
          </div>
<p>Hexo默认情况下是不能让图片并排显示的，这里需要更改一下设置，将下方代码块的两行注释掉即可。 Markdown中的语法<code>{% gp 1-n %} {% endgp %}</code>，n代表需要并排的图片个数。</p>
<div class="note warning">
            <p>之前不可在行内使用单反引号引用标签插件，否则会被hexo理解为插入标签。</p>
          </div>
<figure class="highlight javascript"><figcaption><span>next/source/css/_common/components/tags/group-pictures.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">.page-post-detail .post-body .group-picture-column {</span><br><span class="line">  <span class="comment">// float: none;</span></span><br><span class="line">  margin-top: 10px;</span><br><span class="line">  <span class="comment">// width: auto !important;</span></span><br><span class="line">  img { <span class="attr">margin</span>: <span class="number">0</span> auto; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>当图片设置为并排显示以后，不能使用"fancybox"的预览功能，要在另一个文件中注释掉一句代码：</p>
<figure class="highlight javascript"><figcaption><span>themes/next/source/js/src/utils.js</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">wrapImageWithFancyBox: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    $(<span class="string">'.content img'</span>)</span><br><span class="line">      .not(<span class="string">':hidden'</span>)</span><br><span class="line">      <span class="comment">// .not('.group-picture img, .post-gallery img')</span></span><br><span class="line">      .each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br></pre></td></tr></tbody></table></figure>
<h3 id="插入本地资源文件夹中的图片">插入本地资源文件夹中的图片</h3>
<p>将<code>_config.yml</code>中的<code>post_asset_folder</code>设置为true之后，并不能顺利地以<code>![](show.jpg)</code>的方式添加图片。 需要安装"hexo-asset-image"的依赖，再将第24行代码<code>var endPos = link.lastIndexOf('.');</code> 修改为<code>var endPos = link.lastIndexOf('/');</code>后才能正常使用。</p>
<div class="note info">
            <p><a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹|Hexo</a> <a href="https://github.com/xcodebuild/hexo-asset-image/issues/51">修改"hexo-asset-image"</a></p>
          </div>
<h2 id="字体">字体</h2>
<p>更新至hexo-next v7.8.0，文章字号大了一圈，涂涂改改两天才得到差不多的效果。 以下文件分别修改了文章正文、标题、代码的字号。</p>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_common\components\post\post.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">+<span class="selector-tag">desktop-large</span>() {</span><br><span class="line">  <span class="attribute">font-size</span>: $font-size-small;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_common\components\post\post-header.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title</span> {</span><br><span class="line">  <span class="attribute">font-size</span>: $font-size-larger;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">margin</span>: initial;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  word-wrap();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight css"><figcaption><span>themes\next\source\css\_common\scaffolding\highlight\highlight.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">pre</span> {</span><br><span class="line">  @extend $code-block;</span><br><span class="line">  <span class="selector-tag">font-size</span>: 1.125<span class="selector-tag">em</span>;  // <span class="selector-attr">[line100]</span>添加一行，覆盖其他设置</span><br><span class="line">  <span class="selector-tag">overflow</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">  <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="功能与插件">功能与插件</h1>
<h2 id="一言">一言</h2>
<p>来自这里：<a href="https://ouuan.github.io/hexo博客搭建指北/#一言（ヒトコト）">ouuan</a></p>
<ol type="1">
<li><p>在代码所示文件中找到这一字段：<code>&lt;aside id="sidebar" class="sidebar"&gt;</code>，然后在下边粘贴。 </p><figure class="highlight html"><figcaption><span>themes/next/layout/_macro/sidebar.swig</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;aside id="sidebar" class="sidebar"&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一言 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: table-cell;vertical-align: top; color:#B2B7F2;font-size:24px;font-family:'Times New Roman',serif;font-weight:bold;text-align:left;"</span>&gt;</span>“<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: table-cell;text-align: left; vertical-align: middle; text-indent: 2em; padding: 0.8em 0.2em 1em 0.2em"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:burlywood;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"hitokoto-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: table-cell; vertical-align: bottom; color:#B2B7F2;font-size:24px;font-family:'Times New Roman',serif;font-weight:bold;text-align:left;"</span>&gt;</span>”<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align: right; font-size: 0.8em; color: black;"</span> <span class="attr">id</span>=<span class="string">"hitokoto-from"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 15px; font-size: 0.8em; color: black;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://hitokoto.cn/"</span>&gt;</span>Hitokoto<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 15px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一言 end --&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><figure class="highlight html"><figcaption><span>themes/next/layout/_scripts/commons.swig</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $.get(<span class="string">'https://v1.hitokoto.cn/?c=a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#hitokoto-content'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(data.hitokoto);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#hitokoto-from'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(<span class="string">'——'</span> + data.from);</span></span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><figure class="highlight styl"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> {</span><br><span class="line">    <span class="attribute">background</span>: rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="折叠块功能">折叠块功能</h2>
<p>详细内容请见该<a href="https://www.cnblogs.com/woshimrf/p/hexo-fold-block.html">链接</a></p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{% fold 所涉及到的文件： %}</span><br><span class="line">+ themes\next\scripts\tags.js</span><br><span class="line">+ themes\next\scripts\fold.js</span><br><span class="line">+ themes\next\source\js\src\post-details.js</span><br><span class="line">+ themes\next\source\css\_custom\custom.styl</span><br><span class="line">{% endfold %}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="网页背景">网页背景</h2>
<p>在<a href="https://yltx.cf/2019/01/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8C%97/#%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF">这里</a>学到的背景图设置，看到其博客效果后向朋友学习了<a href="#文章背景">如何去掉文章背景</a>。</p>
<p>设置网页背景及文章透明度 </p><figure class="highlight css"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(/images/background/<span class="number">20180830</span>_040329207_iOS.jpg);</span><br><span class="line">    background-repeat: no-repeat;  //</span><br><span class="line">    <span class="selector-tag">background-attachment</span><span class="selector-pseudo">:fixed</span>;  // 背景图不滚动</span><br><span class="line">    <span class="selector-tag">background-size</span>: <span class="selector-tag">cover</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.main-inner</span> {</span><br><span class="line">    opacity: 0.8;  // 文章透明度</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="文章背景">文章背景</h2>
<p>去除背景只需要把该元素的<code>background</code>属性注释掉即可。</p>
<div class="note warning">
            <p>使用深色背景会造成博客阅读困难</p>
          </div>
<ol type="1">
<li>文章及文章预览</li>
</ol>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_schemes/Pisces/_layout.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> {</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: $content-desktop-padding;</span><br><span class="line">  <span class="attribute">width</span>: $content-wrap;</span><br><span class="line">  // background: white;</span><br><span class="line">  <span class="selector-tag">min-height</span>: 700<span class="selector-tag">px</span>;</span><br><span class="line">  box-shadow: $box-shadow-inner;</span><br><span class="line">  border-radius: $border-radius-inner;</span><br><span class="line">  // ……</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<ol start="2" type="1">
<li>阅读全文按钮</li>
</ol>
<figure class="highlight css"><figcaption><span>themes/next/source/css/_common/components/buttons.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> {</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: $btn-default-font-size;</span><br><span class="line">  <span class="attribute">color</span>: $btn-default-color;</span><br><span class="line">  // background: $btn-default-bg;</span><br><span class="line">  border: $btn-default-border-width solid $btn-default-border-color;</span><br><span class="line">  <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  border-radius: $btn-default-radius;</span><br><span class="line">  <span class="selector-tag">transition-property</span>: <span class="selector-tag">background-color</span>;</span><br><span class="line">  <span class="selector-tag">the-transition</span>();</span><br><span class="line">  <span class="selector-tag">line-height</span>: 2;</span><br><span class="line">  // ……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="jemoji">jemoji</h2>
<p>给Hexo添加对表情的支持，使用的是<a href="https://api.github.com/emojis">Github Emojis API</a></p>
<h3 id="安装">安装</h3>
<p><code>$ npm install hexo-filter-github-emojis --save</code></p>
<h3 id="选项">选项</h3>
<p>在Hexo配置文件<code>_config.yml</code>中添加默认设置：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></tbody></table></figure>
<div class="note info">
            <p>如果对<code>::</code>添加表情的方式不感冒，可以尝试使用<code>{% github_emoji sparkles %}</code>方式添加表情<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
          </div>
<div class="note info">
            <p>在front-matter中添加<code>no-emoji: true</code>可以禁用<code>::</code>的渲染，但<code>{% github_emoji sparkles %}</code>不会被禁用<span class="github-emoji"><span>✨</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
          </div>
<h2 id="bootstrap-note">bootstrap note</h2>
<p>使用方式 <code>{% note class_name %} Content (md partial supported) {% endnote %}</code></p>
<div class="note default">
            <p>default</p>
          </div>
<div class="note primary">
            <p>primary</p>
          </div>
<div class="note success">
            <p>success</p>
          </div>
<div class="note info">
            <p>info</p>
          </div>
<div class="note warning">
            <p>warning</p>
          </div>
<div class="note danger">
            <p>danger</p>
          </div>
<div class="note info">
            <h2 id="bootstrap-note2">bootstrap note2</h2>
<p>里边加了分割线<code>-------</code>的话，匿名分割线上方的一行会变成同级标题</p>
          </div>
<h2 id="gist">Gist</h2>
<p><code>{% gist gist_id file_name %}</code></p>
<p>&lt;% gist 19169c91a19ab7580e4678e4ed25375f extensions.json %&gt;</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">{% fold 点击查看gist %}</span><br><span class="line">网络原因打不开gist</span><br><span class="line">{% endfold %}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="swig标签">swig标签</h2>
{% raw %}
content
{% endraw %}

<h1 id="接下来">接下来</h1>
<h2 id="浮动插入图片像这个">浮动插入图片，<a href="https://notes.iissnan.com/2016/next-documentations-reload/#前季剧情回顾">像这个</a></h2>
<h2 id="无法访问404">无法访问404</h2>
<p>只能以<code>localhost:4000/404.html</code>的方式访问</p>
<h2 id="本页侧边栏">本页侧边栏</h2>
<p>滑到最上方，然后向右看<span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Loline——一个flask RESTful API</title>
    <url>/2019/03/08/loline/</url>
    <content><![CDATA[<h1 id="loline">Loline</h1>
<p>受于<a href="https://hitokoto.cn">一言</a>的启发，利用今天一下午的时间利用flask建立了一个轻量级的RESTful API——Loline。其内容大抵是英雄联盟143位英雄的中英文绰号、名字和pick台词。</p>
<a id="more"></a>
<div class="note warning">
            <p>下文所列出的部分网站可能需要科学上网才能访问</p>
          </div>
<p>一开始要收集到所有英雄的全部台词的，发现收集这些东西真的很难。</p>
<h2 id="中文名称及绰号">中文名称及绰号</h2>
<p>这个是在鹅厂联盟官网<a href="https://lol.qq.com/data/info-heros.shtml">资料库</a>收集的，因为用了不懂的技术，网页源代码里边没有要找的数据，自然也不能用简单的爬虫来做这些事。还是浏览器开发者工具帮了忙：在Elements一栏可以复制想要的数据，然后保存到本地文件，就可以用Beautiful Soup来提取数据了。这里提取到的是中英文名称及中文绰号，然后根据英文名称去下一步爬取英文绰号。</p>
<h2 id="英文绰号">英文绰号</h2>
<p>一开始去了拳头的<a href="https://developer.riotgames.com/">开发网站</a>，发现根本没有提供这种接口。后来发现在<a href="https://lol.gamepedia.com/">GamePedia</a>的英雄详情页有需要的东西，但也仅仅是lol.qq.com的英文版（能用爬虫解决）。写好爬虫脚本，来回更改执行好几次才把英文绰号保存下来。 </p><div class="note success">
            <p>在GemaPedia-英雄联盟的主页仔细看了一下，也没找到英雄详细信息的入口，得在搜索栏搜索英雄的名字才能找到，例如：<a href="https://lol.gamepedia.com/Teemo">Teemo</a>。</p>
          </div> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-08-champions-lol-na.jpg" class="Champions" width="500" height="250" title="英雄联盟英文网站"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-08-ahri-champions-lol-na.jpg" class="阿狸" width="500" height="250" title="示例-阿狸"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-08-developer-lol.jpg" class="拳头开发者网站" width="500" height="250" title="拳头开发者网站"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-08-lol-gamepedia.jpg" class="GamePedia-LOL" width="500" height="250" title="lol.gamepedia.com"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-08-lol-gamepedia-teemo.jpg" class="GamePedia-提莫" width="500" height="250" title="示例-提莫"><p></p>
<h2 id="pick台词">Pick台词</h2>
<p>然后又是pick台词的收集工作，这是最令人头疼的地方。在百度云搜素引擎上找到了大多数英雄的Word版英雄台词，但因为建立日期比较早，有很多台词已经更改了，再加上处理量比较大、需求量不高，就暂时搁置了那个Word。但总得有点内容吧，就选定了Pick英雄的台词，大都是百度谷歌搜集而来。因为英雄改版重做等原因，有些已经不适用了，然后自己启动游戏训练模式，选好英雄听语音，然后立马关掉……不知道百度、谷歌、开关游戏多少次，才勉强把143位英雄的台词收集完。因为有的英雄台词不太熟悉，可能有的已经过时而没有更改，这就等到发现再说吧。</p>
<h2 id="api的使用">Api的使用</h2>
<div class="note danger">
            <p>使用方式经多次尝试，已经更新为<a href="/2019/03/10/many-ways-to-loline/" title="新的方式">新的方式</a>。</p>
          </div>
<p>使用方法是同<a href="/2019/03/05/start-hexo/#一言">一言</a>一样 ，你同样可以参照<a href="https://ouuan.github.io/hexo博客搭建指北/#一言（ヒトコト）">原文作者</a>的方式，但只需要根据下方代码把<code>themes/next/layout/_macro/sidebar.swig</code>中的id和Hitokoto的小标题改一下即可。</p>
<figure class="highlight html"><figcaption><span>themes/next/layout/_scripts/commons.swig</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$.get(<span class="string">'http://149.129.113.178:5000/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'----------------------------------------'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">		$(<span class="string">'#loline-content'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(data.words);</span></span><br><span class="line"><span class="javascript">		$(<span class="string">'#loline-from'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(<span class="string">'——'</span> + data.title_zh+<span class="string">' '</span>+data.name_zh);</span></span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<h2 id="代码">代码</h2>
<p>收集数据的时候也写了不少的代码，但保存下来数据之后其中大多数已经没有用了，所以这里只贴出来了Flask的代码。需要请邮件联系获取 <span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#! py -3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> util <span class="keyword">import</span> load_champions</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, abort, make_response, request</span><br><span class="line"></span><br><span class="line"><span class="comment"># http://www.pythondoc.com/flask-restful/first.html</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'JSON_AS_ASCII'</span>] = <span class="literal">False</span></span><br><span class="line">champions = load_champions(<span class="string">"data/champions.json"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span>, methods=[<span class="string">'GET'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    id_ = random.randint(<span class="number">1</span>, <span class="built_in">len</span>(champions))</span><br><span class="line">    print(id_)</span><br><span class="line">    champion = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> t: t[<span class="string">'id'</span>] == id_, champions))</span><br><span class="line">    <span class="keyword">return</span> jsonify(champion[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_requests</span>(<span class="params">response</span>):</span></span><br><span class="line">    response.headers[<span class="string">'Access-Control-Allow-Origin'</span>] = <span class="string">'*'</span></span><br><span class="line">    response.headers[<span class="string">'Access-Control-Allow-Methods'</span>] = <span class="string">'GET'</span></span><br><span class="line">    response.headers[<span class="string">'Access-Control-Allow-Headers'</span>] = <span class="string">'Content-Type,Authorization'</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    <span class="keyword">return</span> make_response(jsonify({<span class="string">'error'</span>: <span class="string">'Not Found'</span>}), <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.after_request(after_requests)</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Python</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Loline</tag>
        <tag>Flask</tag>
        <tag>json</tag>
        <tag>英雄联盟</tag>
      </tags>
  </entry>
  <entry>
    <title>Loline —— 加载本地json</title>
    <url>/2019/03/10/many-ways-to-loline/</url>
    <content><![CDATA[<h1 id="使用数据的几种方式">使用数据的几种方式</h1>
<h2 id="restful-api">RESTful API</h2>
<p>这种方式在<a href="/2019/03/08/loline/" title="上一篇文章">上一篇文章</a>中已经使用过。</p>
<p>在使用Ajax跨域请求json的方式下，遇到了两点麻烦： 1. 阿里云服务器上运行的python脚本有<em>不知名的问题</em>。 2. GitHub Pages的博客上需要使用HTTPS来跨域请求，这就需要一个SSl证书，但是自己的证书不会被浏览器信任，而去阿里云申请证书（有免费的）需要注册域名，太麻烦了，所以就改变一下请求json的方式，改用本地加载数据的方式。</p>
<a id="more"></a>
<h2 id="加载本地json">加载本地json</h2>
<div class="note warning">
            <p>注意<code>"/json/champions.json"</code>不能写成<code>"json/champions.json"</code>的形式，不然会在post页面显示404错误。 &gt; http://localhost:4000/2019/03/08/loline/json/champions.json 404 (Not Found)</p>
          </div>
<figure class="highlight html"><figcaption><span>next\layout\_scripts\commons.swig</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">	$.get(<span class="string">"/json/champions.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> ranint = <span class="function"><span class="keyword">function</span>(<span class="params">min, max</span>) </span>{</span></span><br><span class="line"><span class="javascript">    	<span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * (max - min)) + min;</span></span><br><span class="line">        }(1, data.length);</span><br><span class="line">        champion = data[ranint-1];</span><br><span class="line"><span class="javascript">		$(<span class="string">'#loline-content'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(champion.words);</span></span><br><span class="line"><span class="javascript">		$(<span class="string">'#loline-from'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(<span class="string">'——'</span> + champion.title_zh+<span class="string">' '</span>+champion.name_zh);</span></span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>下边是相应的属性设置，但实际上和之前一言设置都差不多。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{% fold 点击查看 %}</span><br><span class="line"></span><br><span class="line">{% code lang:html next\layout\_macro\sidebar.swig %}</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"sidebar-inner"</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;blockquote <span class="class"><span class="keyword">class</span></span>=<span class="string">"blockquote-loline"</span>&gt;</span><br><span class="line">            &lt;b&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:burlywood;"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"loline-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;/b&gt;</span><br><span class="line">          &lt;/blockquote&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=<span class="string">"text-align: right; font-size: 0.8em; color: black;"</span> id=<span class="string">"loline-from"</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div style=<span class="string">"margin-top: 15px; font-size: 0.8em; color: black;"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://moeext.github.io/2019/03/08/loline/#more"</span>&gt;</span>LOLine<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div style=<span class="string">"height: 15px"</span>&gt;&lt;/div&gt;</span><br><span class="line">{% endcode %}</span><br><span class="line">{% endfold %}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="直链访问">直链访问</h2>
<p>可以以直链请求json的方式获取数据，数据源可以为博客所在的仓库。</p>
<p>这种方式返回的data数据类型为<code>string</code>，所以代码也有相应的更改。</p>
<figure class="highlight javascript"><figcaption><span>next\layout\_scripts\commons.swig</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">$.get(<span class="string">"https://raw.githubusercontent.com/.../champions.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'url: '</span>+<span class="string">''</span>);</span><br><span class="line">        champions = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        <span class="keyword">var</span> ranint = <span class="function"><span class="keyword">function</span>(<span class="params">min, max</span>) </span>{</span><br><span class="line">    	<span class="keyword">return</span> <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * (max - min)) + min;</span><br><span class="line">        }(<span class="number">1</span>, data.length);</span><br><span class="line">        champion = champions[ranint-<span class="number">1</span>];</span><br><span class="line">        $(<span class="string">'#loline-content'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(champion.words);</span><br><span class="line">        $(<span class="string">'#loline-from'</span>).css(<span class="string">'display'</span>, <span class="string">''</span>).text(<span class="string">'——'</span> + champion.title_zh+<span class="string">' '</span>+champion.name_zh);</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<h1 id="css数据展示">CSS——数据展示</h1>
<p>模仿<code>block-quote</code>标签的样式，在侧边栏中加入<code>block-loline</code>，如此一来又出现了新问题：svg大小和颜色控制不好，便换回了原来的样子。</p>
<h2 id="blockquote-loline样式">blockquote-loline样式</h2>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">{% fold 查看代码： %}</span><br><span class="line"></span><br><span class="line">{% code lang:styl next\source\css\_common\components\tags\blockquote-center.styl %}</span><br><span class="line">.blockquote-loline {</span><br><span class="line">  position: relative;</span><br><span class="line">  margin: 40px <span class="number">0</span>;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">  border-left: none;</span><br><span class="line">  text-align: center;</span><br><span class="line"></span><br><span class="line">  &amp;::before, &amp;::after {</span><br><span class="line">    position: absolute;</span><br><span class="line">    content: <span class="string">' '</span>;</span><br><span class="line">    display: block;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height: 24px;</span><br><span class="line">    opacity: <span class="number">0.2</span>;</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: <span class="number">0</span> -6px;</span><br><span class="line">    background-size: 22px 22px;</span><br><span class="line">  }</span><br><span class="line">  &amp;::before {</span><br><span class="line">    top: -20px;</span><br><span class="line">    background-image: url($sidebar-quote-left);</span><br><span class="line">    border-top: 1px solid $grey-light;</span><br><span class="line">  }</span><br><span class="line">  &amp;::after {</span><br><span class="line">    bottom: -20px;</span><br><span class="line">    background-image: url($sidebar-quote-right);</span><br><span class="line">    border-bottom: 1px solid $grey-light;</span><br><span class="line">    background-position: <span class="number">100</span>% 8px;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  p, div { text-align: center; }</span><br><span class="line">}</span><br><span class="line">{% endcode %}</span><br><span class="line">{% endfold %}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="设置base变量">设置base变量</h2>
<p>自定义了两个SVG，在<code>SVG: path</code>标签中可以加入<code>fill="#B2B7F2"</code>定义SVG的颜色。</p>
<p>在<code>next\source\css\_common\components\tags\blockquote-center.styl</code>中发现可用自定义变量，然后在下方文件中更改了以下原来的svg并新建了两个变量。</p>
<figure class="highlight styl"><figcaption><span>next\source\css\_variables\base.styl</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// blockquote-loline icon 只是更改了一下颜色</span></span><br><span class="line"><span class="variable">$sidebar</span>-quote-<span class="attribute">left</span> = <span class="string">'../images/sidebar-quote-l.svg'</span></span><br><span class="line"><span class="variable">$sidebar</span>-quote-<span class="attribute">right</span> = <span class="string">'../images/sidebar-quote-r.svg'</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Loline</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron-Vue开发笔记</title>
    <url>/2019/03/23/electron-note/</url>
    <content><![CDATA[<p>对于Electron的了解，还是开始于<a href="https://motrix.app/">Motrix</a>，一个颜值极高的多功能下载工具。在GitHub项目页面看到了“Electron”一词，从此开始了废寝忘食的学习过程……</p>
<a id="more"></a>
<p>从electron到electron-vue，不仅重拾了之前自学的Html、CSS、js，还扩展到了Node.js，还有Vue、Bootstrap等前端框架。虽然现在并不知道他们到底是用来干嘛的（Vue，我说谁呢自己心里去除），但也有个初步的了解了。</p>
<h1 id="环境">环境</h1>
<div class="note warning">
            <p>欲练此功，必先自宫。</p>
          </div>
<p>刚准备拿起书看计算机组成原理，就在知乎上看到有人推荐<a href="https://motrix.app/">Motrix</a>这个东西，惊讶于颜值，了解项目的技术栈后，又感叹于技术。心里默默想着，这书怕是，看不成了。</p>
<h1 id="抄代码">抄代码</h1>
<p>很多代码及代码风格都模仿自Motrix（羞羞<span class="github-emoji"><span>😶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</p>
<h1 id="样式与排版">样式与排版</h1>
<p>感觉好多种样式不对的情况都是没有刷新（瞎写定位）</p>
<h1 id="打开对话框">打开对话框</h1>
<p>打开对话框的尝试倒没有踩多少坑，看<a href="https://electronjs.org/docs/api/dialog">electron文档</a>就可以handle。 ## 注意 ### 选择文件和文件夹-2019/03/26 在<a href="https://electronjs.org/docs/api/dialog">对话框文档</a>中有这么一句： </p><div class="note primary">
            <p>在 Windows 和 Linux 上, 打开对话框不能同时是文件选择器和目录选择器, 因此如果在这些平台上将 properties 设置为["openFile"、"openDirectory"], 则将显示为目录选择器。</p>
          </div> 若对选择文件和文件夹都有需要，则应将它们分开处理。<p></p>
<h3 id="文件夹-20190326">文件夹-2019/03/26</h3>
<p>在读取文件夹下的文件目录时，可以用<code>forEach</code>循环，因为<code>forEach</code>是同步的，即使没有<code>Sync</code>（详见该<a href="http://www.gimoo.net/t/1502/54e2acd26b263.html">博客</a>）。在该循环内也建议使用同步函数，否则可能会遇到数据还没来得及传出来就返回的问题。当然，返回为空（或不全）。</p>
<h1 id="小结">小结</h1>
<p>经过三天没日没夜地折腾，终于看到了一丝曙光。在bootstrap的加持下排版样式有了雏形，有了Vue的高级功能（没见过的都是高级），可以任意添加单个或多个图片了。</p>
<h2 id="预览-20190323">预览-2019/03/23</h2>
<p>现在的界面就是酱紫： + 原生卡片（bootstrap中.card-columns的样式，加了自制页眉） + 自制卡片</p>
<p>两种样式看起来只差一个图片的margin，看起来大小不太一样。但是设计的时候走了很多弯路。 自制卡片没有使用.card-columns的时候图片的定位有问题： 1. 宽&gt;高的时候图片不能居中 2. 高&gt;宽的时候图片突破容器高度，向下伸出一大截。 使用.card-group和.card-decks的时候一张图片占了整个页面，问题太多了，而且自己写的CSS也一直在变，没有太大的可比性。现在能做成这样子已经巨jb开心了，感觉自己啥都tm会……</p>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-23-card-columns-%E5%8E%9F%E7%94%9F%E5%8D%A1%E7%89%87%E6%A0%B7%E5%BC%8F.jpg" class="" title="原生卡片样式">
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-23-card-columns-%E8%87%AA%E5%88%B6%E5%8D%A1%E7%89%87%E6%A0%B7%E5%BC%8F.jpg" class="" title="自制卡片样式">
]]></content>
      <categories>
        <category>Node.js</category>
        <category>Electron</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>前端</tag>
        <tag>Electron-Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron-Vue遇到的诸多问题</title>
    <url>/2019/03/26/electron-issues/</url>
    <content><![CDATA[<p>由于个人水平原因遇到的解决不了或已经解决的问题。</p>
<a id="more"></a>
<h1 id="环境构建">环境构建</h1>
<h2 id="webpack-referenceerror-process-is-not-defined">Webpack ReferenceError: process is not defined</h2>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">ERROR in Template execution failed: ReferenceError: process is not defined</span><br><span class="line"></span><br><span class="line">  ERROR in   ReferenceError: process is not defined</span><br><span class="line"></span><br><span class="line">    - index.ejs:11 eval</span><br><span class="line">      [.]/[html-webpack-plugin]/lib/loader.js!./src/index.ejs:11:2</span><br><span class="line"></span><br><span class="line">    - index.ejs:16 module.exports</span><br><span class="line">      [.]/[html-webpack-plugin]/lib/loader.js!./src/index.ejs:16:3</span><br><span class="line"></span><br><span class="line">    - index.js:284</span><br><span class="line">      [Buper]/[html-webpack-plugin]/index.js:284:18</span><br><span class="line"></span><br><span class="line">    - runMicrotasks</span><br><span class="line"></span><br><span class="line">    - task_queues.js:97 processTicksAndRejections</span><br><span class="line">      internal/process/task_queues.js:97:5</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://github.com/SimulatedGREG/electron-vue/issues/871#issuecomment-529809406">saved</a></p>
<figure class="highlight js"><figcaption><span>webpack.renderer.config.js</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin({</span><br><span class="line">  filename: <span class="string">'index.html'</span>,</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">'../src/index.ejs'</span>),</span><br><span class="line">  minify: {</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">    removeComments: <span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// ↓ 2020-03-10 https://github.com/SimulatedGREG/electron-vue/issues/871#issuecomment-529809406</span></span><br><span class="line">  isBrowser: <span class="literal">false</span>,</span><br><span class="line">  isDevelopment: process.env.NODE_ENV !== <span class="string">'production'</span>,</span><br><span class="line">  <span class="comment">// ↑ 2020-03-10 https://github.com/SimulatedGREG/electron-vue/issues/871#issuecomment-529809406</span></span><br><span class="line">  nodeModules: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    ? path.resolve(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">    : <span class="literal">false</span></span><br><span class="line">}),</span><br></pre></td></tr></tbody></table></figure>
<!-- <% if (! require('process').browser) { %>
  <script>
    if (process.env.NODE_ENV !== 'development') window.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
  </script>
<% } %> -->
<figure class="highlight js"><figcaption><span>index.ejs</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">&amp;lt% <span class="keyword">if</span> (!htmlWebpackPlugin.options.isBrowser &amp;&amp; !htmlWebpackPlugin.options.isDevelopment) { %&amp;gt</span><br><span class="line">    script</span><br><span class="line">      <span class="built_in">window</span>.__static = <span class="built_in">require</span>(<span class="string">'path'</span>).join(__dirname, <span class="string">'/static'</span>).replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>)</span><br><span class="line">    /script</span><br><span class="line">&amp;lt% } %&amp;gt</span><br></pre></td></tr></tbody></table></figure>
<h1 id="electron-vue">Electron &amp; Vue</h1>
<h2 id="ipcrenderer.send函数不能工作-20190326">ipcRenderer.send()函数不能工作-2019/03/26</h2>
<p>Console里的错误描述： </p><div class="note danger">
            <p>found in ---&gt; <gallery> at src/renderer/components/Gallery/Gallery.vue <mainpage> at src/renderer/components/MainPage.vue <buterapp> at src/renderer/App.vue <root> TypeError: electron__WEBPACK_IMPORTED_MODULE_3___default.a.send is not a function at VueComponent.drop (Gallery.vue?f747:125) at drop (Gallery.vue?f24d:127) at invokeWithErrorHandling (vue.esm.js?a026:1863) at HTMLDivElement.invoker (vue.esm.js?a026:2188) at HTMLDivElement.original._wrapper (vue.esm.js?a026:7542)</root></buterapp></mainpage></gallery></p>
          </div><p></p>
<p>该问题可能的原因是：在引入ipcRenderer的时候写成了<code>import ipcRenderer from 'electron'</code>，改成<code>const {ipcRenderer} = require('electron')</code>不再显示错误。</p>
<h2 id="ipcrenderer和ipcmain">ipcRenderer和ipcMain</h2>
<p>ipcRenderer和ipcMain这两个类之间传递的数据是<strong>object</strong>格式，即使你在ipcRenderer里向ipcMain发送的是数组。只这么单向地说是因为在文件对话框里选择的文件经sender发送到ipcRenderer后，其object格式使用forEach不会报错。具体原因待研究。</p>
<h2 id="ipcrenderer.on重复执行dialog">ipcRenderer.on重复执行（dialog）</h2>
<p>问题描述：点击按钮打开对话框，选择文件并输出在屏幕上。第一次打开对话框选择一个图片，会有一个图片添加到视图上；再打开对话框选择一个或多个图片，会进来双倍相同的图片；接着再打开会有三倍，四倍…… 这是个从一开始就令我脑壳痛的问题，来回测试代码就是找不到问题在哪，但是知道是在<code>ipcRenderer.on()</code>中反复执行的，之前存储数据的格式简单：数组可以去重，简单对象可以用图片的src做键，直接去掉重复的图片链接。而把数据存储到Vuex的store中之后，加上编辑页面的需要，数据结构变得复杂，变成了对象列表，这就不得不解决这个问题。后来还是在Stack Overflow中找到了<a href="https://stackoverflow.com/questions/52111151/node-on-method-firing-too-many-times">解决办法</a>：把<code>ipcRenderer.on()</code>用<code>ipcRenderer.once()</code>替代，这是因为每一次点击按钮打开dialog都会设置一个监听器，多次打开就需要手动删除之前的监听器，这样子很麻烦，用<code>ipcRenderer.once()</code>就会在程序块执行结束后自行删除监听器。</p>
<h2 id="dialog选择文件夹会返回undefined">dialog选择文件夹会返回undefined</h2>
<p>这是一个原因不明的问题，还没去StackOverflow上找找。现在的做法是直接过滤掉undefined的数据，目前没有很大的问题。</p>
<h1 id="vue-vuex">Vue &amp; Vuex</h1>
<h2 id="vue数据更新视图不更新-20190324">Vue数据更新，视图不更新-2019/03/24</h2>
<p>点击文件对话框可以添加图片，但是拖入就添加不了，vue的数据对象也更新了，可能是更新数据的方法有问题。参考<a href="https://blog.csdn.net/zifeiyu130/article/details/78950244">Vue中数组和对象更改后视图不刷新的问题</a> 尝试了N种方法，仍然tmd解决不了，考虑添加初始化图片。</p>
<p>添加初始化图片仍然不能解决问题，情况是dom中有添加的卡片元素，就是在页面上没有显示。经过多次查找，在<code>.card-columns</code>的外层div上有一个<code>v-show='showTip'(showTip=false)</code>，而且在设计页面的时候多包上了一层div（具体记不太清楚了，应该是给功能扩展留出的空间）。最后解决的方式是：去掉了多余的div和<code>v-show=false</code>，重新写了一下gallery相关的样式，得以解决。</p>
<h2 id="全局变量函数-20190326">全局变量、函数-2019/03/26</h2>
<p>谷歌了很多种注册全局变量、函数的方法，在我这里都行不通，可能是我个人水平的原因。 最后解决的方案是，将三代组件合并成父子两代组件，在父组件里声明大部分变量，然后通过<code>props</code>和<code>this.$emit()</code>方法在父子组件之间通信并同步变量解决了问题。</p>
<p>在使用<code>this.drag_tip_seen_flag = true;this.$emit('get_drag_tip_seen_flag', drag_tip_seen_flag)</code>向父组件传递更改过的<code>dragTipSeenFlag</code>变量的情况下，当点击<code>&amp;times;</code>关闭选项卡的时候，Console会出现Vue的警告: </p><div class="note danger">
            <p>found in......</p>
          </div> 意思是由于更改了变量而警告改变量可能会被覆盖，需要注意。在把该两行代码换成<code>this.$emit('get_drag_tip_seen_flag', true)</code>之后，警告消失。这里的解决方式只是个例，如果父子组件之间互相传递的变量比较多而引发该问题时，就需要考虑换一种方法了。（我是tmd再也不想接触vue的全局变量和全局函数了）<p></p>
<h2 id="vuex-state数据返回错误">Vuex state数据返回错误</h2>
<p>在将数据移至Vuex后，发现从state中获取的bool数据不符合预期，总是返回错误的数据。只有在一开始初始化的时候才正确，更不用说更新这个state了。</p>
<h2 id="vuex-do-not-mutate-vuex-store-state-outside-mutation-handlers.-20190407">[vuex] <a href="https://stackoverflow.com/questions/46044276/vuex-do-not-mutate-vuex-store-state-outside-mutation-handlers">do not mutate vuex store state outside mutation handlers.</a> 2019/04/07</h2>
<p>意思是说不要在mutation之外更改state中变量的值，例如再actions中对state中某一变量赋值就会出现此错误。</p>
<h1 id="界面布局">界面布局</h1>
<h2 id="card-columns布局-20190323">card-columns布局-2019/03/23</h2>
<p>图片少于4张的时候会显示两列（同理，少于两张会显示1列），这是因为页面设计的排版是面向列布局的，当图片大于4张的时候自动会占满3列。 <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-23-card-columns-bug.jpg" class="" title="似bug又不是bug"></p>
<h2 id="卡片阴影移位-20190324">卡片阴影移位-2019/03/24</h2>
<p>Bootstrap中.card-columns&gt;card加CSS阴影后，card[1,2]和card[1,3]上方阴影被截取到前一列最下方。猜测时因为<code>.card-columns</code>的面向列排版，导致阴影被错位了。<strong>解决方法</strong>：在<code>.card</code>的CSS里加一个<code>margin: 8px;</code>，给卡片上方阴影留出空间即可。 <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-24-card-columns-%E9%98%B4%E5%BD%B1%E7%A7%BB%E4%BD%8D.jpg" class="" title="阴影移位"></p>
<h1 id="node.js">Node.js</h1>
<h2 id="奇怪的字符202a">奇怪的字符202A</h2>
<p>在读取图片的测试过程中，由于路径字符串的问题，导致读取文件时路径被当成相对路径处理报错。当我把该字符串放到控制台处理时，用其作为路径执行会报“文件不存在”的错误。然后通过<a href="https://www.fileformat.info/info/unicode/char/202a/index.htm"><code>string.charCodeAt(0)</code></a>发现字符串的第一位出现了一个不常见的字符<code>8234</code>，16进制为<code>202AH</code>，谷歌了一下看着好像是一个控制字符，可能是我在文件属性的“安全选项卡”复制路径的时候多复制了一个字符，让重新用正确的路径字符串读取文件的时候，错误消失。</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-27-fucking-char-1.jpg"> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-03-27-fucking-char-2.jpg"></p>
<p>当把该字符复制到js代码里时，编辑器里是看不到的，但是会报代码语法错误。</p>
]]></content>
      <categories>
        <category>Node.js</category>
        <category>Electron</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Electron-Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex自定义设置</title>
    <url>/2019/05/14/latex-notes/</url>
    <content><![CDATA[<p><span class="math inline">\(\LaTex\)</span>论文写作笔记</p>
<a id="more"></a>
<h1 id="latex样式">Latex样式</h1>
<h2 id="页面尺寸">页面尺寸</h2>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{geometry}</span><br><span class="line"><span class="keyword">\geometry</span>{a4paper, left=2.4cm, top=2.4cm, right=2.4cm, bottom=2.4cm}  <span class="comment">% 页边距</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="页眉页脚">页眉页脚</h2>
<p>L、C、R分别表示左、中、右；E、O表示奇偶页，页眉页脚的设置中可以使用它们的组合，多选项的情况用中括号分开。 现在有几个问题： 1. 页眉需要的样式是：奇数页居中显示章节号，偶数页显示“东北林业大学本科毕业论文”，但是通过[CE]、[CO]设置就不行，而且只设置<code>\fancyhead[CE]{\song\xiaowu{东北林业大学本科毕业论文}}</code>也会失败，什么都不显示。 2. 双线页眉的长度一开始是<code>\headwidth</code>，右侧没有达到文档宽度的位置。改为<code>\columnwidth</code>或<code>\textwidth</code>之后，长度虽然改变了，但是文字的位置没有随之向右移动（没有居中） 3. 问题1中的章节号不知道怎么获取…… </p><figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{fancyhdr}</span><br><span class="line"></span><br><span class="line"><span class="comment">%------- 页眉页脚样式 -------%</span></span><br><span class="line"><span class="keyword">\pagestyle</span>{fancy}</span><br><span class="line"><span class="keyword">\fancyhf</span>{}  <span class="comment">% 清空设置</span></span><br><span class="line"><span class="keyword">\fancyhead</span>[C]{<span class="keyword">\song</span><span class="keyword">\xiaowu</span>{东北林业大学本科毕业论文}}</span><br><span class="line"><span class="comment">% \fancyhead[CO]{\thechapter}</span></span><br><span class="line"><span class="keyword">\fancyfoot</span>[C]{<span class="keyword">\xiaowu</span>{-<span class="keyword">\thepage</span>-}}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\headrulewidth</span>}{0.4pt}</span><br><span class="line"></span><br><span class="line"><span class="comment">%------- 双线页眉的设置 -------%</span></span><br><span class="line"><span class="keyword">\makeatletter</span> <span class="comment">%双线页眉</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\headrule</span>{{<span class="keyword">\if@fancyplain</span><span class="keyword">\let</span><span class="keyword">\headrulewidth</span><span class="keyword">\plainheadrulewidth</span><span class="keyword">\fi</span><span class="comment">%</span></span><br><span class="line"><span class="keyword">\hrule</span><span class="keyword">\@height</span> 1.0pt <span class="keyword">\@width</span><span class="keyword">\columnwidth</span><span class="keyword">\vskip</span>1pt<span class="comment">%上面线为1pt粗</span></span><br><span class="line"><span class="keyword">\hrule</span><span class="keyword">\@height</span> 0.5pt<span class="keyword">\@width</span><span class="keyword">\columnwidth</span>  <span class="comment">%下面0.5pt粗</span></span><br><span class="line"><span class="keyword">\vskip</span>-2<span class="keyword">\headrulewidth</span><span class="keyword">\vskip</span>-1pt}      <span class="comment">%两条线的距离1pt</span></span><br><span class="line">  <span class="keyword">\vspace</span>{6mm}}     <span class="comment">%双线与下面正文之间的垂直间距</span></span><br><span class="line"><span class="keyword">\makeatother</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="latex功能">Latex功能</h1>
<h2 id="图片标题的样式">图片标题的样式</h2>
<p>把图片标题默认的“图1:示例”更改为“图2-1 示例”。 其中： - thesection{} 表示章节号 - 两个命令分别设置表格和插图的格式 - 命令中的“-”可以用“.”等符号代替，以适应不同的要求 </p><figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span> {<span class="keyword">\thetable</span>} {<span class="keyword">\thesection</span>{}-<span class="keyword">\arabic</span>{table}} </span><br><span class="line"><span class="keyword">\renewcommand</span> {<span class="keyword">\thefigure</span>} {<span class="keyword">\thesection</span>{}-<span class="keyword">\arabic</span>{figure}}</span><br><span class="line"><span class="keyword">\captionsetup</span>{labelformat=default,labelsep=space} <span class="comment">%去除冒号</span></span><br></pre></td></tr></tbody></table></figure> ## 公式编号样式<p></p>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span><span class="keyword">\theequation</span>{<span class="keyword">\arabic</span>{section}-<span class="keyword">\arabic</span>{equation}} <span class="comment">% 公式引用输出样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{equation}</span><br><span class="line">    (<span class="keyword">\ref</span>{Formula.Second.1}) <span class="keyword">\Leftrightarrow</span> S(i,j)=(K*I)(i,j)=<span class="keyword">\sum</span><span class="built_in">_</span>m <span class="keyword">\sum</span><span class="built_in">_</span>n I(i-m,j-n)K(m,n)<span class="keyword">\label</span>{Formula.Second.3}</span><br><span class="line"><span class="keyword">\end</span>{equation}</span><br><span class="line">(<span class="keyword">\ref</span>{Formula.Second.3})式也被称为I和K的互相关</span><br></pre></td></tr></tbody></table></figure>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-05-14-%E5%85%AC%E5%BC%8F%E7%BC%96%E5%8F%B7.jpg" class="" title="公式的编号与引用">
<h2 id="并排图片">并排图片</h2>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{figure}[htbp]</span><br><span class="line">    <span class="keyword">\centering</span> <span class="comment">%图片全局居中</span></span><br><span class="line">    <span class="keyword">\subfigure</span>[原图]{</span><br><span class="line">      <span class="keyword">\includegraphics</span>[width=0.2<span class="keyword">\textwidth</span>]{resource/2-原图.jpg}</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">\subfigure</span>[互相关]{</span><br><span class="line">      <span class="keyword">\includegraphics</span>[width=0.2<span class="keyword">\textwidth</span>]{resource/2-互相关.jpg}</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">\subfigure</span>[卷积]{</span><br><span class="line">      <span class="keyword">\includegraphics</span>[width=0.2<span class="keyword">\textwidth</span>]{resource/2-卷积.jpg}</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">\caption</span>{卷积核的翻转对特征提取的影响}</span><br><span class="line">    <span class="keyword">\label</span>{Figure.Second.1}</span><br><span class="line">  <span class="keyword">\end</span>{figure}</span><br></pre></td></tr></tbody></table></figure>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-05-14-%E5%A4%9A%E5%9B%BE.jpg" class="" title="图片并排显示">
<h2 id="并排图片组">并排图片组</h2>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{figure}[H]</span><br><span class="line">      <span class="keyword">\centering</span> <span class="comment">%图片全局居中</span></span><br><span class="line">      <span class="keyword">\subfigure</span>[叶枯病]{</span><br><span class="line">        <span class="keyword">\begin</span>{minipage}[t]{.2<span class="keyword">\textwidth</span>}</span><br><span class="line">          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/blight(1).jpg} <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/blight(2).jpg} <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/blight(3).jpg} </span><br><span class="line">        <span class="keyword">\end</span>{minipage}</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">\subfigure</span>[白粉病]{</span><br><span class="line">        <span class="keyword">\begin</span>{minipage}[t]{.2<span class="keyword">\textwidth</span>}</span><br><span class="line">          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/powdery(1).jpg} <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/powdery(2).jpg} <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/powdery(3).jpg} </span><br><span class="line">        <span class="keyword">\end</span>{minipage}</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">\subfigure</span>[锈病]{</span><br><span class="line">        <span class="keyword">\begin</span>{minipage}[t]{.2<span class="keyword">\textwidth</span>}</span><br><span class="line">          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/rust(1).jpg} <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/rust(2).jpg} <span class="keyword">\</span></span><br><span class="line"><span class="keyword"></span>          <span class="keyword">\includegraphics</span>[width=<span class="keyword">\textwidth</span>]{resource/third/rust(3).jpg} </span><br><span class="line">        <span class="keyword">\end</span>{minipage}</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">\caption</span>{数据样本}</span><br><span class="line">      <span class="keyword">\label</span>{Figure.Third.6}</span><br><span class="line">    <span class="keyword">\end</span>{figure}</span><br></pre></td></tr></tbody></table></figure>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-06-05-latex-image-group.jpg" class="">
<h2 id="插入代码块">插入代码块</h2>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{listings}  <span class="comment">% 代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\lstset</span>{  <span class="comment">% 代码块设置</span></span><br><span class="line">  basicstyle=<span class="keyword">\xiaowu</span><span class="keyword">\fontspec</span>{Consolas}, </span><br><span class="line">  columns=fixed,       </span><br><span class="line">  <span class="comment">% numbers=left,                                        % 在左侧显示行号</span></span><br><span class="line">  <span class="comment">% numberstyle=\tiny\color{gray},                       % 设定行号格式</span></span><br><span class="line">  frame=none,                                          <span class="comment">% 不显示背景边框</span></span><br><span class="line">  backgroundcolor=<span class="keyword">\color</span>[RGB]{245,245,244},            <span class="comment">% 设定背景颜色</span></span><br><span class="line">  keywordstyle={                                       <span class="comment">% 设定关键字颜色</span></span><br><span class="line">    <span class="keyword">\color</span>[RGB]{40,40,255}</span><br><span class="line">    <span class="keyword">\fontspec</span>{Consolas}</span><br><span class="line">  },               </span><br><span class="line">  numberstyle=<span class="keyword">\footnotesize</span><span class="keyword">\color</span>{darkgray},           </span><br><span class="line">  commentstyle=<span class="keyword">\it</span><span class="keyword">\color</span>[RGB]{0,96,96},                <span class="comment">% 设置代码注释的格式</span></span><br><span class="line">  stringstyle=<span class="keyword">\rmfamily</span><span class="keyword">\slshape</span><span class="keyword">\color</span>[RGB]{128,0,0},   <span class="comment">% 设置字符串格式</span></span><br><span class="line">  showstringspaces=false,                              <span class="comment">% 不显示字符串中的空格</span></span><br><span class="line">  language=python,                                     <span class="comment">% 设置语言</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-06-05-latex-code.jpg" class="">
<h2 id="参考文献bibtex">参考文献（bibtex）</h2>
<p>将bibtex格式的文本保存在论文同目录的<strong>references.bib</strong>文件中，并在论文合适的地方插入该语句： </p><figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>{unsrt} <span class="comment">% 文献标准选项</span></span><br><span class="line"><span class="keyword">\bibliography</span>{references}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight latex"><figcaption><span>references.bib</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">@article{hubel1962receptive,</span><br><span class="line">  title={Receptive fields, binocular interaction and functional architecture in the cat's visual cortex},</span><br><span class="line">  author={Hubel, David H and Wiesel, Torsten N},</span><br><span class="line">  journal={The Journal of physiology},</span><br><span class="line">  volume={160},</span><br><span class="line">  number={1},</span><br><span class="line">  pages={106--154},</span><br><span class="line">  year={1962},</span><br><span class="line">  publisher={Wiley Online Library}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 在论文中插入<code>\cite{hubel1962receptive}</code>以引用参考文献<p></p>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-06-05-reference.jpg" class="">
<p>LaTeX 参考文献标准选项及其样式共有以下8种： 1. plain，按字母的顺序排列，比较次序为作者、年度和标题 2. unsrt，样式同plain，只是按照引用的先后排序 3. alpha，用作者名首字母+年份后两位作标号，以字母顺序排序 4. abbrv，类似plain，将月份全拼改为缩写，更显紧凑 5. ieeetr，国际电气电子工程师协会期刊样式 6. acm，美国计算机学会期刊样式 7. siam，美国工业和应用数学学会期刊样式 8. apalike，美国心理学学会期刊样式</p>
<h2 id="参考文献编号上标">参考文献编号上标</h2>
<p>将<code>\cite</code>命令替换为<code>\upcite</code>命令。 </p><figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\upcite</span>}[1]{<span class="keyword">\textsuperscript</span>{<span class="keyword">\textsuperscript</span>{<span class="keyword">\cite</span>{<span class="params">#1</span>}}}}</span><br></pre></td></tr></tbody></table></figure> ## 插入pdf <figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{pdfpages}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"><span class="keyword">\includepdf</span>[⟨key=val⟩]{⟨filename⟩}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure> + <em></em> 默认插入第一页 + <em></em> 插入第1、2页 + <em></em> 插入第3、4、5页 + <em></em> 依次插入第3页、空白页、第8、9、10、11、15页 + <em></em> 全部插入 + 更多参数详见pdfpages文档：<code>texdoc pdfpages</code><p></p>
<h2 id="插入自定义宽度字符">插入自定义宽度字符</h2>
为了应付查重而想出的奇技淫巧，经测试没什么B用 + <strong></strong> 零宽空格 + **

<p>** 插入白色的“.”，并减小其宽度使其看起来并没有插入任何字符 下图对比可看出“.”的存在 </p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-06-05-zero-space1.jpg" class=""></div><div class="group-picture-column" style="width: 50%;"><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-06-05-zero-space2.jpg" class=""></div></div></div></div><p></p>
<h1 id="latex问题">Latex问题</h1>
<h2 id="引入图片时报图片文件找不到的错误">引入图片时报图片文件找不到的错误</h2>
<p>这个问题在写作前期没有出现，后来不知道做了什么改动才报这个错误的。 把图片的文件名改成英文解决了。</p>
<h2 id="图表编号清零">图表编号清零</h2>
<p>没有专门设置的情况下，新的一章中插图的编号不会清零，在开头插入以下代码即可： </p><figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\setcounter</span>{table}{0}</span><br><span class="line"><span class="keyword">\setcounter</span>{figure}{0}</span><br></pre></td></tr></tbody></table></figure> ## 中文加粗失败 你可能需要这个：<strong>AutoFakeBold</strong>，在<code>\documentclass[12pt, UTF8, AutoFakeBold]{ctexart}</code>中加入。 解决方案来自这里：<a href="https://www.zhihu.com/question/58456658/answer/157120688" title="" target="">xelatex编译加粗楷体为什么会失败？</a><p></p>
<h2 id="插入图片位置">插入图片位置</h2>
<p>latex为了排版的美观，可能图片的位置和源码中的位置不相对应，如果要强制插图在某一位置，需要<code>\usepackage{float}</code>， 在图片中加入<code>[H]</code>选项替代<code>[htbp]</code>以强制图片在该位置。</p>
<h2 id="图片尺寸">图片尺寸</h2>
<p>有的情况下不指出图片的尺寸，直接插入图片会报错，在选项中使用<strong>natwidth</strong>和<strong>natheight</strong>可以解决问题。 <code>\includegraphics[width=\textwidth, natwidth=1612, natheight=482]{resource/second/LeNet-5.png}</code></p>
]]></content>
      <categories>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>在LaTex中使用自定义字体</title>
    <url>/2019/02/22/2019-2-22-customize-font-in-latex/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>挖坑</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<p>刚接触LaTex，不太了解编译运行方式，网上搜了好多种方法都一直报错。这个例子刚测试的时候还编译不了，据猜测原因应该是编译缓存未清理或导入宏包的问题。</p>
<h2 id="定义代码段字体">定义代码段字体</h2>
<p>下边是一种自定义字体的方法，来自<a href="https://blog.csdn.net/ProgramChangesWorld/article/details/51502730">LaTeX技巧006：使用不同的英文字体</a></p>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]{article}</span><br><span class="line"><span class="keyword">\usepackage</span>{fontspec}</span><br><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman}<span class="comment">%fontspec下这个命令设置全局默认字体</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">Hello World!<span class="keyword">\\</span></span><br><span class="line"><span class="comment">%这也是一种调用方式，无须fontspec宏包</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Calibri" at 14pt <span class="keyword">\rm</span> This is Calibri<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Candara" at 14pt <span class="keyword">\rm</span> This is Candara<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Mistral" at 14pt <span class="keyword">\rm</span> This is Mistral<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Bahnschrift" at 14pt <span class="keyword">\rm</span> This is Bahnschrift<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Pristina" at 14pt <span class="keyword">\rm</span> This is Pristina<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Microsoft Uighur" at 14pt <span class="keyword">\rm</span> This is Microsoft Uighur<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Bradley Hand ITC" at 14pt <span class="keyword">\rm</span> This is Bradley Hand ITC<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Nirmala UI" at 14pt <span class="keyword">\rm</span> This is Nirmala UI<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="CCBackBeat" at 14pt <span class="keyword">\rm</span> This is CCBackBeat<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Supercell-Magic" <span class="keyword">\rm</span> This is Supercell-Magic<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Supercell-Magic" at 14pt <span class="keyword">\rm</span> This is Supercell-Magic<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\font</span><span class="keyword">\rm</span>="Supercell-Magic" at 18pt <span class="keyword">\rm</span> This is Supercell-Magic<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<p>显示结果</p>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-02-22%20-fonts.jpg"></p>
<h2 id="设置全局自定义字体">设置全局（自定义）字体</h2>
<p>第二天在测试中发现，用如下代码也能实现同样的效果，现在猜测是刚安装的字体VSCode或XeLaTex识别不了的问题。</p>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]{article}</span><br><span class="line"><span class="keyword">\usepackage</span>{ctex}</span><br><span class="line"><span class="keyword">\usepackage</span>{fontspec}</span><br><span class="line"><span class="keyword">\usepackage</span>{metalogo}</span><br><span class="line"><span class="keyword">\usepackage</span>{amsmath}</span><br><span class="line"><span class="keyword">\usepackage</span>{newtxtt, newtxmath}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\setmainfont</span>{CCBackBeat} <span class="comment">%英文字体</span></span><br><span class="line"><span class="keyword">\setCJKmainfont</span>{DengXian} <span class="comment">% 中文字体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>{论文测试}</span><br><span class="line"><span class="keyword">\author</span>{Teemo}</span><br><span class="line"><span class="keyword">\date</span>{2019年2月22日}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\section</span>{输出测试}</span><br><span class="line"> Hello <span class="keyword">\XeLaTeX</span>.</span><br><span class="line"> Body of the article.</span><br><span class="line"> second not sure <span class="keyword">\\</span></span><br><span class="line"> fuck LaTex <span class="keyword">\\</span></span><br><span class="line"> 换行试试？<span class="keyword">\LaTeX</span>，WithTab Icon,How to add a command <span class="keyword">\\</span></span><br><span class="line"></span><br><span class="line"> 换行</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2019/2019-02-23-font-test-143421.jpg"></p>
<h2 id="自定义字体">自定义字体</h2>
<figure class="highlight latex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 定义字体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\song</span>}{<span class="keyword">\CJKfamily</span>{song}} &nbsp; &nbsp;<span class="comment">% 宋体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\fs</span>}{<span class="keyword">\CJKfamily</span>{fs}} &nbsp; &nbsp; &nbsp;  <span class="comment">% 仿宋体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\kai</span>}{<span class="keyword">\CJKfamily</span>{kai}} &nbsp; &nbsp; &nbsp;<span class="comment">% 楷体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\hei</span>}{<span class="keyword">\CJKfamily</span>{hei}} &nbsp; &nbsp;  <span class="comment">% 黑体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\li</span>}{<span class="keyword">\CJKfamily</span>{li}} &nbsp;  &nbsp; &nbsp; <span class="comment">% 隶书</span></span><br><span class="line"><span class="comment">% 定义字号</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\yihao</span>}{<span class="keyword">\fontsize</span>{26pt}{36pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp; &nbsp; <span class="comment">% 一号, 1.4 倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\erhao</span>}{<span class="keyword">\fontsize</span>{22pt}{28pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp;  &nbsp;<span class="comment">% 二号, 1.25倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\xiaoer</span>}{<span class="keyword">\fontsize</span>{18pt}{18pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp; &nbsp;<span class="comment">% 小二, 单倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\sanhao</span>}{<span class="keyword">\fontsize</span>{16pt}{24pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp; &nbsp;<span class="comment">% 三号, 1.5倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\xiaosan</span>}{<span class="keyword">\fontsize</span>{15pt}{22pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp;  &nbsp;<span class="comment">% 小三, 1.5倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\sihao</span>}{<span class="keyword">\fontsize</span>{14pt}{21pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span class="comment">% 四号, 1.5 倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\banxiaosi</span>}{<span class="keyword">\fontsize</span>{13pt}{19.5pt}<span class="keyword">\selectfont</span>} &nbsp;&nbsp;<span class="comment">% 半小四, 1.5倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\xiaosi</span>}{<span class="keyword">\fontsize</span>{12pt}{18pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp; &nbsp;<span class="comment">% 小四, 1.5倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\dawu</span>}{<span class="keyword">\fontsize</span>{11pt}{11pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp; &nbsp; <span class="comment">% 大五号, 单倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\wuhao</span>}{<span class="keyword">\fontsize</span>{10.5pt}{15.75pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp;<span class="comment">% 五号, 单倍行距</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\xiaowu</span>}{<span class="keyword">\fontsize</span>{9pt}{9pt}<span class="keyword">\selectfont</span>} &nbsp; &nbsp;<span class="comment">% 小五, 单倍行距</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\hei</span><span class="keyword">\xiaosan</span><span class="keyword">\textbf</span>{实验代码} <span class="comment">% 黑体小三加粗</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>LaTex</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>LaTex</tag>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>软件及开发包安装中的那些坑</title>
    <url>/2019/02/22/2019-2-22-software-installation-description/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>先把坑都踩一遍是为了以后踩更多的坑。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h2 id="latexindent">latexindent</h2>
<ul>
<li>来自：安装LaTex-formatter需要安装的工具</li>
<li>方式：解压缩，（可数的）文件直接拖入目录</li>
<li>目录：<code>C:\Program\texlive\2018\texmf-dist\scripts\latexindent</code></li>
<li>文件：latexindent.exe</li>
<li>使用方式：选中代码-&gt;右键<code>格式化选定内容</code></li>
</ul>
<p>注：更改了该目录下的<code>defaultSettings.yaml</code>的某些设置</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># line222~line246</span></span><br><span class="line"><span class="attr">indentAfterHeadings:</span></span><br><span class="line">    <span class="attr">part:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">chapter:</span> </span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">section:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">subsection:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">4</span></span><br><span class="line">    <span class="string">subsection*:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">4</span></span><br><span class="line">    <span class="attr">subsubsection:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">paragraph:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">6</span></span><br><span class="line">    <span class="attr">subparagraph:</span></span><br><span class="line">       <span class="attr">indentAfterThisHeading:</span> <span class="number">1</span></span><br><span class="line">       <span class="attr">level:</span> <span class="number">7</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="ruby-jekyll">ruby-jekyll</h2>
<p>大佬<a href="http://www.pchou.info/ssgithubPage/2014-07-04-build-github-blog-page-08.html">Pchou的博客</a></p>
<ol type="1">
<li><p>安装<a href="https://rubyinstaller.org/downloads/">Ruby with Devkit</a>，所有组件都在这里了，注意安装路径不要出现空格</p></li>
<li><p>ruby安装完，会提示安装MSYS2，跟着提示走就好。现在新版本的Ruby已经集成了<a href="%5BRubyGems%5D(https://rubygems.org/pages/download)">RubyGems</a></p></li>
<li><p>环境安装好就可以安装Bundle和Jekyll了（<code>gem install jekyll</code>），但是在今天（2019-2-22）安装的过程中发现bundle是安装环境是已经安装好了的。</p></li>
<li><p>到博客目录下依次执行以下命令： </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">bundle install</span><br><span class="line">bundle update</span><br><span class="line">bundle <span class="built_in">exec</span> jekyll serve</span><br></pre></td></tr></tbody></table></figure> ### 关于ryby及Jekyll的某些错误<p></p></li>
<li><p><code>jekyll 3.7.4 | Error:  incompatible character encodings: UTF-8 and GBK</code> 不知道如何解决，尝试设置命令行字符编码<code>chcp 65001</code>（不行） 已知的可能解决方法：设置 -&gt; 时间和语言 -&gt; 区域 -&gt; 更改日期、时间或数字格式 -&gt; 管理 -&gt; 更改系统区域设置：选中“使用Unicode UTF-8 提供全球语言支持”，然后重启电脑，应该就解决了。</p></li>
<li><p>执行<code>bundle</code>命令时出现<code>C:/Program/Ruby25-x64/lib/ruby/2.5.0/rubygems.rb:289:in 'find_spec_for_exe': can't find gem bundler (&gt;= 0.a) with executable bundle (Gem::GemNotFoundException)</code>，在<a href="https://stackoverflow.com/questions/47026174/find-spec-for-exe-cant-find-gem-bundler-0-a-gemgemnotfoundexception">StackOverflow</a>上找到答案：<code>Gemfile.lock</code>文件最后的<code>BUNDLED WITH</code>版本改为已安装的bundler版本。或者删除Gemfile.lock文件，重新<code>bundle exec jekyll serve</code></p></li>
</ol>
<h2 id="vscode中cc找不到头文件">VSCode中C/C++找不到头文件</h2>
<p>可能需要设置这些环境变量：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">LIBRARY_PATH</span><br><span class="line">C:\Program\mingw64\lib\gcc\x86_64-w64-mingw32\7.3.0</span><br><span class="line"></span><br><span class="line">C_INCLUDE_PATH</span><br><span class="line">C:\Program\mingw64\include;</span><br><span class="line">C:\Program\mingw64\lib\gcc\x86_64-w64-mingw32\7.3.0\include;</span><br><span class="line"></span><br><span class="line">CPLUS_INCLUDE_PATH</span><br><span class="line">C:\Program\mingw64\include;</span><br><span class="line">C:\Program\mingw64\lib\gcc\x86_64-w64-mingw32\7.3.0\include\c++;</span><br><span class="line">C:\Program\mingw64\lib\gcc\x86_64-w64-mingw32\7.3.0\include\c++\backward;</span><br><span class="line">C:\Program\mingw64\lib\gcc\x86_64-w64-mingw32\7.3.0\include\c++\x86_64-w64-mingw32;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="cuda-cudnn">CUDA cuDNN</h2>
<p>复制cuDNN到CUDA目录</p>
<figure class="highlight cmd"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>\<span class="title">CUDA</span>\<span class="title">v9</span>.0\<span class="title">bin</span>\<span class="title">cudnn64_7.dll</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>\<span class="title">CUDA</span>\<span class="title">v9</span>.0\<span class="title">include</span>\<span class="title">cudnn.h</span></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">NVIDIA</span> <span class="title">GPU</span> <span class="title">Computing</span> <span class="title">Toolkit</span>\<span class="title">CUDA</span>\<span class="title">v9</span>.0\<span class="title">lib</span>\<span class="title">x64</span>\<span class="title">cudnn.lib</span></span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>GitHub Pages</tag>
        <tag>笔记</tag>
        <tag>LaTex</tag>
        <tag>C/C++</tag>
        <tag>CUDA</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 技巧</title>
    <url>/2020/02/28/python-notes/</url>
    <content><![CDATA[<p>这里记录了 Python 中不熟悉或者古怪的操作。🧐</p>
<a id="more"></a>
<h1 id="字符串">字符串</h1>
<h2 id="二元运算">二元运算</h2>
<h3 id="测试">测试</h3>
<p>非空字符串之间进行 <code>and</code> 运算，返回最后一个字符串，进行 <code>or</code> 运算返回首个字符串，但对 <code>True</code> 和 <code>False</code> 不适用🙅‍。</p>
<figure class="highlight python"><figcaption><span>非空字符串之间</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'str'</span> <span class="keyword">and</span> <span class="string">'int'</span></span><br><span class="line"><span class="string">'int'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'str'</span> <span class="keyword">or</span> <span class="string">'int'</span></span><br><span class="line"><span class="string">'str'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><figcaption><span>空与非空字符串</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'str'</span> <span class="keyword">and</span> <span class="string">''</span></span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'str'</span> <span class="keyword">or</span> <span class="string">''</span></span><br><span class="line"><span class="string">'str'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">''</span> <span class="keyword">or</span> <span class="string">'str'</span></span><br><span class="line"><span class="string">'str'</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><figcaption><span>字符串与布尔值</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"><span class="string">'str'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'str'</span> <span class="keyword">and</span> <span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'str'</span> <span class="keyword">and</span> <span class="literal">False</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="且运算">且运算</h3>
<p>列元素与行元素进行“且”运算，如：<code>'str' and 'int'</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">|  <span class="keyword">and</span>  | <span class="string">'int'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">---------------- ---------------------</span><br><span class="line">| <span class="string">'str'</span> | <span class="string">'int'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">|  <span class="string">''</span>   |  <span class="string">''</span>     <span class="string">''</span>     <span class="string">''</span>     <span class="string">''</span>   |</span><br><span class="line">| <span class="literal">True</span>  | <span class="string">'int'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">| <span class="literal">False</span> | <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span> |</span><br></pre></td></tr></tbody></table></figure>
<p>列元素与行元素行“且”运算，如：<code>'int' and 'str'</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">|  <span class="keyword">and</span>  | <span class="string">'str'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">--------------------------------------</span><br><span class="line">| <span class="string">'int'</span> | <span class="string">'str'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">|  <span class="string">''</span>   |  <span class="string">''</span>     <span class="string">''</span>     <span class="string">''</span>     <span class="string">''</span>   |</span><br><span class="line">| <span class="literal">True</span>  | <span class="string">'str'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">| <span class="literal">False</span> | <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span> |</span><br></pre></td></tr></tbody></table></figure>
<h3 id="或运算">或运算</h3>
<p>列元素与行元素进行“或”运算，如：<code>'str' or 'int'</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">|  <span class="keyword">or</span>   | <span class="string">'int'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">--------------------------------------</span><br><span class="line">| <span class="string">'str'</span> | <span class="string">'str'</span>  <span class="string">'str'</span>  <span class="string">'str'</span>  <span class="string">'str'</span> |</span><br><span class="line">|  <span class="string">''</span>   | <span class="string">'int'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">| <span class="literal">True</span>  | <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>  |</span><br><span class="line">| <span class="literal">False</span> | <span class="string">'int'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br></pre></td></tr></tbody></table></figure>
<p>列元素与行元素行“且”运算，如：<code>'int' or 'str'</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">|  <span class="keyword">or</span>   | <span class="string">'str'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">--------------------------------------</span><br><span class="line">| <span class="string">'int'</span> | <span class="string">'int'</span>  <span class="string">'int'</span>  <span class="string">'int'</span>  <span class="string">'int'</span> |</span><br><span class="line">|  <span class="string">''</span>   | <span class="string">'str'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br><span class="line">| <span class="literal">True</span>  | <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>  |</span><br><span class="line">| <span class="literal">False</span> | <span class="string">'str'</span>   <span class="string">''</span>    <span class="literal">True</span>   <span class="literal">False</span> |</span><br></pre></td></tr></tbody></table></figure>
<h2 id="多元运算">多元运算</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="元组">元组</h1>
<h2 id="拆包">拆包</h2>
<figure class="highlight python"><figcaption><span>拆包</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h1 id="函数">函数</h1>
<h2 id="匿名函数">匿名函数</h2>
<p>匿名函数只能有一个表达式，不写return，表达式的结果就是返回值</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x*x</span><br><span class="line">f()</span><br></pre></td></tr></tbody></table></figure>
<h2 id="闭包">闭包</h2>
<p>外层函数引用了内层函数的变量（参数也算变量），然后返回内层函数的情况，称之为闭包（Closure）。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">parms</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">return</span> parms</span><br></pre></td></tr></tbody></table></figure>
<h2 id="装饰器">装饰器</h2>
<p>decorator 本质上是一个高阶函数，它接收一个函数作为参数，然后返回一个新函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Log</span>(<span class="params">f</span>):</span></span><br><span class="line">    print(<span class="string">"call "</span>, f.__name__)</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器"@Log"等价于 "func = Log(func)"</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"><span class="comment"># call  func</span></span><br><span class="line"><span class="comment"># Hello World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要在装饰器中传入参数，可以用闭包</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LOG</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flog</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">"call "</span>, f.__name__)</span><br><span class="line">        <span class="keyword">return</span> f(*args)</span><br><span class="line">    <span class="keyword">return</span> flog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@LOG</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h1 id="面向对象">面向对象</h1>
<h2 id="类属性和实例属性">类属性和实例属性</h2>
<p>如果更改某一实例的类属性，则只影响该实例，类和其他实例的类属性不受影响。 此操作实际上是给该实例添加了一个实例属性并为其赋值，访问该实例“类属性”的时候，实际上访问的是其“实例属性” 因为当实例属性和类属性重名时，实例属性优先级高，会屏蔽掉类属性的访问。</p>
<figure class="highlight python"><figcaption><span>解释代码</span><a href="https://www.imooc.com/code/6176">慕课网</a></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    address = <span class="string">'Earth'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">'Bob'</span>)</span><br><span class="line">p2 = Person(<span class="string">'Alice'</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">'Person.address = '</span> + Person.address</span><br><span class="line">p1.address = <span class="string">'China'</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">'p1.address = '</span> + p1.address</span><br><span class="line"><span class="built_in">print</span> <span class="string">'Person.address = '</span> + Person.address</span><br><span class="line"><span class="built_in">print</span> <span class="string">'p2.address = '</span> + p2.address</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Output: </span></span><br><span class="line"><span class="string">Person.address = Earth</span></span><br><span class="line"><span class="string">p1.address = China</span></span><br><span class="line"><span class="string">Person.address = Earth</span></span><br><span class="line"><span class="string">p2.address = Earth</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="isinstalce-type">isinstalce() &amp; type()</h2>
<p>isinstalce()用来判断一个对象和一个已知类型是否相同，考虑继承关系，会认为子类是一种父类类型， 而type()不考虑继承关系。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Nursery 开发笔记</title>
    <url>/2020/09/28/nursery-notes/</url>
    <content><![CDATA[<p>Nursery是一个简单的进程托管Demo，用于启动console应用程序。</p>
<a id="more"></a>
<h1 id="问题">问题</h1>
<h2 id="checkboxlist">CheckBoxList</h2>
<p>这里一开始用的是<a href="https://www.c-sharpcorner.com/uploadfile/syedshakeer/checkboxlist-in-wpf/">ObservableCollection</a>的方式，后感感觉太过于繁杂，改为直接向<code>ListBox</code>中添加<code>CheckBox</code>：<code>ProcessListBox.Items.Add(checkBox);</code>。</p>
<h2 id="listview的动态更新">ListView的动态更新</h2>
<p>或许有用的资料 1. <a href="https://www.c-sharpcorner.com/uploadfile/syedshakeer/checkboxlist-in-wpf/">CheckBoxList(ObservableCollection)in WPF</a> 2. <a href="https://blog.csdn.net/farsee520/article/details/106799065">WPF ListView实时更新及INotifyPropertyChanged使用演示</a> 3. <a href="https://blog.csdn.net/djshichaoren/article/details/79957523">WPF Listview绑定数据发生改变后前端没有更新</a></p>
<h3 id="尝试">尝试</h3>
<p>这里想的是另起一个监控线程，对线程的实时信息进行更新。对<code>infoList</code>更新后，通过<code>ProcessInformationListView.ItemsSource = infoList;</code>使其生效，但是遇到了线程间对对象访问的问题： </p><div class="note danger">
            <p><code>System.InvalidOperationException:“调用线程无法访问此对象，因为另一个线程拥有该对象。</code></p>
          </div> <figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line">ProcessInformationListView.Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">{</span><br><span class="line">    ProcessInformationListView.ItemsSource = infoList;</span><br><span class="line">    ArgsButton.Content = <span class="string">"test"</span>;</span><br><span class="line">    logger.Info(<span class="string">"size:"</span> + infoList.Count);</span><br><span class="line">}));</span><br></pre></td></tr></tbody></table></figure> 改成这段代码之后，监控线程（monitor）能更改主线程的对象（button的内容发生更改可以证明），但是<code>ListView</code> 的内容并不会更改。不仅如此，monitor执行后主线程不能向ListView中添加内容了，如果先添加了内容，monitor执行后内容不会改变。<p></p>
<h3 id="最终解决方式">最终解决方式</h3>
<ol type="1">
<li><code>LIstView</code>的数据源使用<code>ObservableCollection</code>：<code>private ObservableCollection&lt;ProcessInformation&gt; InfoList { get; set; }</code></li>
<li>实体类<code>ProcessInformation</code>继承<code>INotifyPropertyChanged</code>接口 <figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessInformation</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _Process;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _PID;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _CPU;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> _Memory;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Process {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> _Process; }</span><br><span class="line">            <span class="keyword">set</span> { _Process = <span class="keyword">value</span>;</span><br><span class="line">                PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Process"</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> PID {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> _PID; }</span><br><span class="line">            <span class="keyword">set</span> { _PID = <span class="keyword">value</span>;</span><br><span class="line">                PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"PID"</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> CPU {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> _CPU; }</span><br><span class="line">            <span class="keyword">set</span> { _CPU = <span class="keyword">value</span>;</span><br><span class="line">                PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"CPU"</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Memory {</span><br><span class="line">            <span class="keyword">get</span> { <span class="keyword">return</span> _Memory; }</span><br><span class="line">            <span class="keyword">set</span> { _Memory = <span class="keyword">value</span>;</span><br><span class="line">                PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(<span class="string">"Memory"</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li>
<li>跨线程访问（这个就不用了，因为<code>ObservableCollection</code>实现了<code>INotifyPropertyChanged</code>接口，当<code>InfoList</code>发生改变时会自动更新<code>ListView</code>，不用手动更新<code>ListView.ItemsSource</code>，也就不会发生跨线程访问<code>ListView</code>了。ps: 好像是跨线程更改前台的数据才会出现<a href="#尝试">这个问题</a>） 不更新、不能添加<code>GridView</code>的原因也应该是没有实现<code>INotifyPropertyChanged</code>接口</li>
</ol>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line">ProcessInformationListView.Dispatcher.BeginInvoke(<span class="keyword">new</span> Action(() =&gt;</span><br><span class="line">{</span><br><span class="line">    ProcessInformationListView.ItemsSource = InfoList;</span><br><span class="line">}));</span><br></pre></td></tr></tbody></table></figure>
<h2 id="不支持从调度程序线程以外的线程对其-sourcecollection-进行的更改">不支持从调度程序线程以外的线程对其 SourceCollection 进行的更改</h2>
<figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ObservableCollection&lt;ProcessInformation&gt; infoList { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">infoList = <span class="keyword">new</span> ObservableCollection&lt;ProcessInformation&gt;();</span><br><span class="line">infoList.Remove(item);</span><br></pre></td></tr></tbody></table></figure>
<div class="note danger">
            <p><code>System.NotSupportedException:“该类型的 CollectionView 不支持从调度程序线程以外的线程对其 SourceCollection 进行的更改。”</code></p>
          </div>
<p><code>ObservableCollection</code>类型的<code>CollectionView</code>不支持从调度程序线程以外的线程对其 SourceCollection 进行的更改。（我也不懂是哪个线程对该对象进行了访问，不是我的监控线程）</p>
<p><a href="https://www.cnblogs.com/Stay627/p/12082792.html">解决方式</a>： </p><figure class="highlight csharp"><table><tbody><tr><td class="code"><pre><span class="line">ThreadPool.QueueUserWorkItem(<span class="built_in">delegate</span></span><br><span class="line">{</span><br><span class="line">    SynchronizationContext.SetSynchronizationContext(<span class="keyword">new</span> DispatcherSynchronizationContext(</span><br><span class="line">        System.Windows.Application.Current.Dispatcher));</span><br><span class="line">    SynchronizationContext.Current.Post(pl =&gt;</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; infoList.Count; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">var</span> item = infoList[i];</span><br><span class="line">            <span class="keyword">if</span> (item.Process.Equals(fileName))</span><br><span class="line">            {</span><br><span class="line">                infoList.Remove(item);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }, <span class="literal">null</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure> # 功能<p></p>
<h2 id="notifyicon"><a href="https://handyorg.github.io/handycontrol/extend_controls/notifyIcon/">NotifyIcon</a></h2>
<p>程序托盘图标用的是<a href="https://handyorg.github.io/handycontrol/">HandyControl</a>的控件。 根据文档编辑图标、绑定事件即可。 </p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hc:NotifyIcon</span> <span class="attr">x:Name</span>=<span class="string">"NotifyIcon"</span> <span class="attr">Text</span>=<span class="string">"ProcessNursery"</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">Visibility</span>=<span class="string">"Visible"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Icon</span>=<span class="string">"/assets/Nursery32x32.ico"</span> <span class="attr">Click</span>=<span class="string">"NotifyIcon_Click"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hc:NotifyIcon.ContextContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">VerticalAlignment</span>=<span class="string">"Center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Command</span>=<span class="string">"hc:ControlCommands.PushMainWindow2Top"</span> <span class="attr">MinWidth</span>=<span class="string">"100"</span> <span class="attr">Content</span>=<span class="string">"OpenPanel"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">Click</span>=<span class="string">"ExitApp"</span> <span class="attr">MinWidth</span>=<span class="string">"100"</span> <span class="attr">Style</span>=<span class="string">"{StaticResource ButtonPrimary}"</span> <span class="attr">Content</span>=<span class="string">"Exit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hc:NotifyIcon.ContextContent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hc:NotifyIcon</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> ## 日志系统<p></p>
<p><a href="https://nlog-project.org/">NLog</a>的日志系统，主要是调试时候找问题的。</p>
<p>分为以下几种日志等级： </p><div class="note default">
            <p>Trace</p>
          </div> <div class="note primary">
            <p>Debug</p>
          </div> <div class="note success">
            <p>Info</p>
          </div> <div class="note info">
            <p>Warn</p>
          </div> <div class="note warning">
            <p>Error</p>
          </div> <div class="note danger">
            <p>Fatal</p>
          </div><p></p>
<h3 id="配置">配置</h3>
<p>NLog使用需要添加配置文件，可以添加到<code>App.config</code>，也可以新建<code>NLog.config</code>然后添加内容。我手动新建配置文件之后使用不了，使用NuGet命令添加成功。（工具-&gt;NuGet 包管理器-&gt;程序包管理器控制台，输入<code>Install-Package NLog.Config [-Version 4.7.5]</code>）。关于自定义日志，可以看<a href="https://github.com/NLog/NLog/wiki">这里</a></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">"http://www.nlog-project.org/schemas/NLog.xsd"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"</span></span></span><br><span class="line"><span class="tag">	  <span class="attr">autoReload</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">throwExceptions</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">internalLogLevel</span>=<span class="string">"Off"</span> <span class="attr">internalLogFile</span>=<span class="string">"c:\temp\nlog-internal.log"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">xsi:type</span>=<span class="string">"ColoredConsole"</span> <span class="attr">layout</span>=<span class="string">"${date:format=yyyy/MM/dd HH\:mm\:ss} ${uppercase:${level}}&gt; ${message}"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">highlight-row</span> <span class="attr">condition</span>=<span class="string">"level == LogLevel.Debug"</span> <span class="attr">foregroundColor</span>=<span class="string">"Green"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">highlight-row</span> <span class="attr">condition</span>=<span class="string">"level == LogLevel.Info"</span> <span class="attr">foregroundColor</span>=<span class="string">"Cyan"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">highlight-row</span> <span class="attr">condition</span>=<span class="string">"level == LogLevel.Warn"</span> <span class="attr">foregroundColor</span>=<span class="string">"Yellow"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">highlight-row</span> <span class="attr">condition</span>=<span class="string">"level == LogLevel.Error"</span> <span class="attr">foregroundColor</span>=<span class="string">"Red"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">highlight-row</span> <span class="attr">condition</span>=<span class="string">"level == LogLevel.Fatal"</span> <span class="attr">foregroundColor</span>=<span class="string">"Red"</span> <span class="attr">backgroundColor</span>=<span class="string">"White"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"debugger"</span> <span class="attr">xsi:type</span>=<span class="string">"Debugger"</span></span></span><br><span class="line"><span class="tag">					  <span class="attr">layout</span>=<span class="string">"${date:format=HH\:mm\:ss} | ${level:padding=-5} | ${message}"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">writeTo</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">minlevel</span>=<span class="string">"Debug"</span> <span class="attr">writeTo</span>=<span class="string">"debugger"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="使用">使用</h3>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LogManager.GetCurrentClassLogger();</span><br><span class="line">logger.Debug(<span class="string">"Debug"</span>);</span><br><span class="line">logger.Info(<span class="string">"Info"</span>);</span><br><span class="line">logger.Error(<span class="string">"Error"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="进程的cpu与内存">进程的CPU与内存</h2>
<p>使用.Net的<code>PerformanceCounter</code>类型对进程的性能进行监控</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line">Process process = pNersury[fileName].process;</span><br><span class="line">PerformanceCounter cpuCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">"Process"</span>, <span class="string">"% Processor Time"</span>, process.ProcessName);</span><br><span class="line">PerformanceCounter memCounter = <span class="keyword">new</span> PerformanceCounter(<span class="string">"Process"</span>, <span class="string">"Working Set"</span>, process.ProcessName);</span><br><span class="line">infoList[i].CPU = cpuCounter.NextValue().ToString() + CPUnit;</span><br><span class="line">infoList[i].Memory = ((<span class="built_in">long</span>)memCounter.NextValue() &gt;&gt; <span class="number">10</span>).ToString() + MemoryUnit;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实时获取子进程的输出">实时获取子进程的输出</h2>
<p>参考： 1. <a href="https://www.cnblogs.com/tcjiaan/p/5957422.html">启动一个进程并实时获取状态信息</a> 2. <a href="https://www.coder.work/article/246276">c# - 从Process获取实时输出</a></p>
<div class="note info">
            <p><code>UseShellExecute</code>必须为<code>false</code>，不然无法在代码中读标准。 <code>RedirectStandardOutput</code>必须为<code>true</code>，这样我们才能在代码中访问标准流。 <code>EnableRaisingEvents</code>必须为<code>true</code>，这样才会引发<code>OutputDataReceived</code>和<code>Exited</code></p>
          </div>
<p>解决方式是两条内容的结合： </p><figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line">Process child = <span class="keyword">new</span> Process();</span><br><span class="line">child.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">child.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">child.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">child.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">child.EnableRaisingEvents = <span class="literal">true</span>;  <span class="comment">// 这样才会引发OutputDataReceived</span></span><br><span class="line">child.OutputDataReceived += <span class="keyword">new</span> DataReceivedEventHandler((s, e) =&gt;</span><br><span class="line">{</span><br><span class="line">    Console.WriteLine(e.Data);</span><br><span class="line">});</span><br><span class="line">child.ErrorDataReceived += <span class="keyword">new</span> DataReceivedEventHandler((s, e) =&gt;</span><br><span class="line">{</span><br><span class="line">    Console.WriteLine(e.Data);</span><br><span class="line">});</span><br><span class="line">child.Start();</span><br><span class="line">child.BeginOutputReadLine();</span><br><span class="line">child.BeginErrorReadLine();</span><br></pre></td></tr></tbody></table></figure><p></p>
]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>C#</tag>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title>FancyToys 开发笔记</title>
    <url>/2020/09/30/fancy-toys-notes/</url>
    <content><![CDATA[<p>FancyToys是一个工具集，里边包含了Nursery。</p>
<a id="more"></a>
<p><a href="https://www.cnblogs.com/hupo376787/category/1090453.html">UWP 大佬</a></p>
<h1 id="项目结构">项目结构</h1>
<h1 id="fancytoys">FancyToys</h1>
<h2 id="contentdialog工具类"><code>ContentDialog</code>工具类</h2>
<div class="note danger">
            <p>System.Exception:“某个异步操作没有正常启动。 Only a single ContentDialog can be open at any time.”</p>
          </div>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"><span class="built_in">string</span> title</span>)</span></span><br><span class="line"><span class="function"></span>        {</span><br><span class="line">            ContentDialog dialog = <span class="keyword">new</span> ContentDialog()</span><br><span class="line">            {</span><br><span class="line">                Title = title,</span><br><span class="line">                PrimaryButtonText = <span class="string">"好的"</span>,</span><br><span class="line">                CloseButtonText = <span class="string">"Cancel"</span>,</span><br><span class="line">                DefaultButton = ContentDialogButton.Primary,</span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">await</span> dialog.ShowAsync();</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight csharp"><figcaption><span>Utils.cs</span><a href="https://stackoverflow.com/questions/33018346/only-a-single-contentdialog-can-be-open-at-any-time-error-while-opening-anoth">StackOverFlow</a></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DialogUtil</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ContentDialog ActiveDialog;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">TaskCompletionSource</span>&lt;<span class="title">bool</span>&gt; DialogAwaiter</span> = <span class="keyword">new</span> TaskCompletionSource&lt;<span class="built_in">bool</span>&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">CreateContentDialog</span>(<span class="params">ContentDialog Dialog, <span class="built_in">bool</span> awaitPreviousDialog</span>)</span> { <span class="keyword">await</span> CreateDialog(Dialog, awaitPreviousDialog); }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">CreateContentDialogAsync</span>(<span class="params">ContentDialog Dialog, <span class="built_in">bool</span> awaitPreviousDialog</span>)</span> { <span class="keyword">await</span> CreateDialog(Dialog, awaitPreviousDialog); }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ActiveDialog_Closed</span>(<span class="params">ContentDialog sender, ContentDialogClosedEventArgs args</span>)</span> { DialogAwaiter.SetResult(<span class="literal">true</span>); }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">await</span> DialogUtil.CreateContentDialogAsync(<span class="keyword">new</span> ContentDialog</span><br><span class="line">        {</span><br><span class="line">            Title = <span class="string">"Info"</span>,</span><br><span class="line">            Content = <span class="keyword">new</span> TextBlock</span><br><span class="line">            {</span><br><span class="line">                Text = text,</span><br><span class="line">                TextWrapping = TextWrapping.Wrap</span><br><span class="line">            },</span><br><span class="line">            PrimaryButtonText = <span class="string">"好的"</span></span><br><span class="line">        }, awaitPreviousDialog: <span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">CreateDialog</span>(<span class="params">ContentDialog Dialog, <span class="built_in">bool</span> awaitPreviousDialog</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (ActiveDialog != <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (awaitPreviousDialog)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">await</span> DialogAwaiter.Task;</span><br><span class="line">                DialogAwaiter = <span class="keyword">new</span> TaskCompletionSource&lt;<span class="built_in">bool</span>&gt;();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> ActiveDialog.Hide();</span><br><span class="line">        }</span><br><span class="line">        ActiveDialog = Dialog;</span><br><span class="line">        ActiveDialog.Closed += ActiveDialog_Closed;</span><br><span class="line">        <span class="keyword">await</span> ActiveDialog.ShowAsync();</span><br><span class="line">        ActiveDialog.Closed -= ActiveDialog_Closed;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="开启受限功能">开启受限功能</h2>
<p>启动其他应用、窗口关闭事件的处理都需要开启受限功能。</p>
<h3 id="添加引用">添加引用</h3>
<p>在项目-引用中添加<code>Windows Desktop Extensions for the UWP</code>，如果找不到的话请到 <code>C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.18362.0\</code>中添加<code>Windows.winmd</code></p>
<h3 id="修改配置">修改配置</h3>
<p>在<code>Package.appxmanifest</code>中修改以下代码。<code>runFullTrust</code>：启动应用程序；<code>confirmAppClose</code>：打开修改 <code>SystemNavigationManagerPreview.GetForCurrentView().CloseRequested</code>的权限以处理该事件。</p>
<figure class="highlight xml"><figcaption><span>Package.appxmanifest</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">&lt;Package</span><br><span class="line">  xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10"</span><br><span class="line">  xmlns:mp="http://schemas.microsoft.com/appx/2014/phone/manifest"</span><br><span class="line">  xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"</span><br><span class="line">  xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities"</span><br><span class="line">  xmlns:desktop="http://schemas.microsoft.com/appx/manifest/desktop/windows10"</span><br><span class="line">  IgnorableNamespaces="uap mp rescap"&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Applications</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">desktop:Extension</span> <span class="attr">Category</span>=<span class="string">"windows.fullTrustProcess"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">Executable</span>=<span class="string">"tools\FancyServer.exe"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">desktop:Extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Extensions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Applications</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Capabilities</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Capability</span> <span class="attr">Name</span>=<span class="string">"internetClient"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rescap:Capability</span> <span class="attr">Name</span>=<span class="string">"runFullTrust"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rescap:Capability</span> <span class="attr">Name</span>=<span class="string">"confirmAppClose"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Capabilities</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight xml"><figcaption><span>App.xaml.cs</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">// public static IAsyncAction LaunchFullTrustProcessForCurrentAppAsync();</span><br><span class="line">// public static IAsyncAction LaunchFullTrustProcessForCurrentAppAsync(string parameterGroupId);</span><br><span class="line">FullTrustProcessLauncher.LaunchFullTrustProcessForCurrentAppAsync();</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考">参考</h3>
<ol type="1">
<li><a href="https://stackoverflow.com/questions/49189353/uwp-how-to-start-an-exe-file-that-is-located-in-specific-directory">UWP: how to start an exe file that is located in specific directory?</a></li>
<li><a href="https://blog.mzikmund.com/2018/09/app-close-confirmation-in-uwp/">App close confirmation in UWP</a></li>
</ol>
<h2 id="uwp与win32通信">UWP与win32通信</h2>
<p>UWP与win32的通信方式有AppService、套接字、管道、RPC、共享内存等，管道比较合适同主机进程间的通信。 作为前端的FancyToys发出请求，FancyServer作为后端处理请求并返回结果。UWP与win32在管道的创建时与 普通管道略有不同，在win32是<code>fullTrustProcess</code>时：</p>
<ol type="1">
<li>UWP使用的管道名需要遵循<code>\\.\pipe\LOCAL\</code>原则（在多次尝试之后使用：<code>@"LOCAL\NurseryPipe"</code>） 2.win32使用的管道名较为复杂：<code>$"Sessions\\{Process.GetCurrentProcess().SessionId}\\AppContainerNamedObjects\\{ApplicationData.Current.LocalSettings.Values["PackageSid"]}\\NurseryPipe"</code></li>
<li>win32在创建管道时需要加入权限验证，否则会报<code>System.UnauthorizedAccessException:“Access to the path is denied.”</code>异常。</li>
</ol>
<figure class="highlight csharp"><figcaption><span>FancyServer</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PipeServerThread</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    server = <span class="keyword">new</span> NamedPipeServerStream(pipeName,</span><br><span class="line">        PipeDirection.InOut, <span class="number">1</span>,</span><br><span class="line">        PipeTransmissionMode.Message,</span><br><span class="line">        PipeOptions.Asynchronous, <span class="number">1024</span>, <span class="number">1024</span>, <span class="literal">null</span>, HandleInheritability.None,</span><br><span class="line">        PipeAccessRights.ChangePermissions);</span><br><span class="line">    <span class="comment">// 权限验证</span></span><br><span class="line">    PipeSecurity ps = server.GetAccessControl();</span><br><span class="line">    PipeAccessRule clientRule = <span class="keyword">new</span> PipeAccessRule(</span><br><span class="line">        <span class="keyword">new</span> SecurityIdentifier(<span class="string">"S-1-15-2-2486220046-417657740-3976339917-3362139460-2716223609-868283920-565007427"</span>),</span><br><span class="line">        PipeAccessRights.ReadWrite,</span><br><span class="line">        AccessControlType.Allow);</span><br><span class="line">    PipeAccessRule ownerRule = <span class="keyword">new</span> PipeAccessRule(</span><br><span class="line">        WindowsIdentity.GetCurrent().Owner,</span><br><span class="line">        PipeAccessRights.FullControl,</span><br><span class="line">        AccessControlType.Allow);</span><br><span class="line">    ps.AddAccessRule(clientRule);</span><br><span class="line">    ps.AddAccessRule(ownerRule);</span><br><span class="line">    server.SetAccessControl(ps);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"Waiting for connection."</span>);</span><br><span class="line">    server.WaitForConnection();</span><br><span class="line">    LoggingManager.Info(<span class="string">$"Connection established: <span class="subst">{pipeName}</span>"</span>);</span><br><span class="line">    reader = <span class="keyword">new</span> StreamReader(server);</span><br><span class="line">    writer = <span class="keyword">new</span> StreamWriter(server);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!server.IsConnected)</span><br><span class="line">        {</span><br><span class="line">            server.Disconnect();</span><br><span class="line">            Console.WriteLine(<span class="string">"Disconnected from FancyToys, waiting for its reconnection."</span>);</span><br><span class="line">            server.WaitForConnection();</span><br><span class="line">            LoggingManager.Info(<span class="string">"FancyToys reconnected"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">string</span> message = reader.ReadLine();</span><br><span class="line">        MessageManager.Receive(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight csharp"><figcaption><span>FancyToys</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PipeClientThread</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    client = <span class="keyword">new</span> NamedPipeClientStream(<span class="string">"."</span>, <span class="string">@"LOCAL\NurseryPipe"</span>,</span><br><span class="line">        PipeDirection.InOut, PipeOptions.Asynchronous);</span><br><span class="line">    client.Connect();</span><br><span class="line"></span><br><span class="line">    reader = <span class="keyword">new</span> StreamReader(client);</span><br><span class="line">    writer = <span class="keyword">new</span> StreamWriter(client);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!client.IsConnected)</span><br><span class="line">        {</span><br><span class="line">            client.Connect();</span><br><span class="line">            Log(<span class="string">"Conection re-established."</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">string</span> message = reader.ReadLine();</span><br><span class="line">        Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =&gt; Monitor.Text +=</span><br><span class="line">        <span class="string">$"Received: <span class="subst">{message}</span><span class="subst">{Environment.NewLine}</span>"</span>).AsTask().Wait();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考-1">参考</h3>
<ol type="1">
<li><a href="https://github.com/hannesne/NamedPipesSample">NamedPipesSample</a></li>
<li><a href="https://stackoverflow.com/questions/60431348/ipc-uwp-c-sharp-pipe-client-fails-on-connect-c-server/60452660#60452660">IPC: UWP C# pipe client fails on connect C++ server</a></li>
<li><a href="https://blog.hjc.im/uwp-named-pipe.html">UWP使用命名管道与桌面程序通信 (C#)</a></li>
</ol>
<h2 id="datagrid的更新">DataGrid的更新</h2>
<p>这 <del>不可能</del> 是最后一个困扰人的问题</p>
<h2 id="可拖拽区域">可拖拽区域</h2>
<p>和WPF不太一样。与之相比较，出现了两个小问题： 1. 一开始没有实现<code>DragOver</code>，误以为不能拖拽，实际上可能已经OK了 2. <code>Rectangle</code>没有<code>Fill</code>属性的话不能拖拽，但可以设置<code>Opacity</code>解决。添加了颜色之后甚至比之前好看。</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">DropArea_Drop</span>(<span class="params"><span class="built_in">object</span> sender, DragEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> defer = e.GetDeferral();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        DataPackageView dpv = e.DataView;</span><br><span class="line">        <span class="keyword">if</span> (dpv.Contains(StandardDataFormats.StorageItems))</span><br><span class="line">        {</span><br><span class="line">            List&lt;StorageFile&gt; fileList = <span class="keyword">new</span> List&lt;StorageFile&gt;();</span><br><span class="line">            <span class="keyword">var</span> files = <span class="keyword">await</span> dpv.GetStorageItemsAsync();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> files)</span><br><span class="line">            {</span><br><span class="line">                DialogUtil.Info(item.Name);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    {</span><br><span class="line">        defer.Complete();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DropArea_DragOver</span>(<span class="params"><span class="built_in">object</span> sender, DragEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    e.AcceptedOperation = DataPackageOperation.Copy;</span><br><span class="line">    e.DragUIOverride.Caption = <span class="string">"拖放以添加"</span>;</span><br><span class="line">    e.DragUIOverride.IsCaptionVisible = <span class="literal">true</span>;</span><br><span class="line">    e.DragUIOverride.IsContentVisible = <span class="literal">true</span>;</span><br><span class="line">    e.DragUIOverride.IsGlyphVisible = <span class="literal">true</span>;</span><br><span class="line">    e.Handled = <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考-2">参考</h3>
<ol type="1">
<li><a href="https://www.cnblogs.com/hupo376787/p/8664512.html">UWP拖拽文件</a></li>
<li><a href="https://www.bilibili.com/video/BV1Ws411y7KW">UWP Soundboard（添加拖拽）</a></li>
</ol>
<h2 id="xaml设置控件样式">xaml设置控件样式</h2>
<p>如果不能直接设置样式的话，试试这个</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListBox</span> <span class="attr">x:Name</span>=<span class="string">"ProcessListBox"</span> <span class="attr">Background</span>=<span class="string">"{ThemeResource BackgroundAcrylicBrush}"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">ItemsSource</span>=<span class="string">"{Binding SwitchList}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListBox.ItemContainerStyle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Style</span> <span class="attr">TargetType</span>=<span class="string">"ListBoxItem"</span>&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Height"</span> <span class="attr">Value</span>=<span class="string">"40"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Setter</span> <span class="attr">Property</span>=<span class="string">"Padding"</span> <span class="attr">Value</span>=<span class="string">"10,0,0,0"</span>/&gt;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListBox.ItemContainerStyle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListBox</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>参考</strong></p>
<p><a href="https://stackoverrun.com/cn/q/10504352">UWP Change ListView Item Height</a> <a href="https://stackoverflow.com/questions/49637947/how-to-dynamically-change-the-height-of-listboxitem-uwp">How to dynamically change the height of ListBoxItem UWP?</a></p>
<h2 id="c修改控件样式属性">C#修改控件样式属性</h2>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetSmallFlyoutItem_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ProcessListBox.ItemContainerStyle = GetStyle(HeightProperty, <span class="string">"32"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">private</span> Style <span class="title">GetStyle</span>(<span class="params">DependencyProperty property, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Style style = <span class="keyword">new</span> Style</span><br><span class="line">    {</span><br><span class="line">        TargetType = <span class="keyword">typeof</span>(ListBoxItem)</span><br><span class="line">    };</span><br><span class="line">    style.Setters.Add(<span class="keyword">new</span> Setter(property, <span class="keyword">value</span>));</span><br><span class="line">    style.Setters.Add(<span class="keyword">new</span> Setter(PaddingProperty, <span class="string">"10,0,0,0"</span>));</span><br><span class="line">    ProcessListBox.ItemContainerStyle = style;</span><br><span class="line">    <span class="keyword">return</span> style;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<div class="note primary">
            <p>在xaml设置的初始属性会被该方法覆盖，例如<code>ListBoxItem</code>的padding又恢复默认，需要重新设置。</p>
          </div>
<img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2020/UWP%E5%8A%A8%E6%80%81%E6%9B%B4%E6%94%B9ListBoxItem%E9%AB%98%E5%BA%A6.gif" class="fuckme" title="更改ListBoxItem高度">
<p><strong>参考</strong></p>
<p><a href="https://blog.csdn.net/lindexi_gd/article/details/104992276">win10 uwp 如何修改 Flyout 的宽度或高度</a>。</p>
<h2 id="contentdialog输入框">ContentDialog输入框</h2>
<p>来自 <a href="https://jingyan.baidu.com/article/219f4bf7b10624de452d3857.html">这里</a></p>
<div class="note primary">
            <p>解决方案资源管理器可以添加内容对话框（ContentDialog）页面！</p>
          </div>
<p>可能是因为对话框不能直接返回输入值，这里用了公开变量的方法。<code>isSaved</code>用于表明是否保存输入，<code>inputArgs</code>用于保存输入值。关闭或取消对话框之后，就可以根据上述两个变量进行相应的操作。感谢提出这个方法的作者。 </p><figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">bool</span> isSaved = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> inputArgs = <span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ContentDialog_PrimaryButtonClick</span>(<span class="params">ContentDialog sender, ContentDialogButtonClickEventArgs args</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    inputArgs = DialogInput.Text;</span><br><span class="line">    isSaved = <span class="literal">true</span>;</span><br><span class="line">    Hide();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ContentDialog_SecondaryButtonClick</span>(<span class="params">ContentDialog sender, ContentDialogButtonClickEventArgs args</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    isSaved = <span class="literal">false</span>;</span><br><span class="line">    Hide();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2020/2020-10-04%20ContentDialog.jpg" class="鸡你太美" title="ContentDialog"><p></p>
<p>这里还有另一个从StackOverflow找到的Dialog生成方法，链接已不可考……</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DialogUtil</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ContentDialog ActiveDialog;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">TaskCompletionSource</span>&lt;<span class="title">bool</span>&gt; DialogAwaiter</span> = <span class="keyword">new</span> TaskCompletionSource&lt;<span class="built_in">bool</span>&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">CreateContentDialog</span>(<span class="params">ContentDialog Dialog, <span class="built_in">bool</span> awaitPreviousDialog</span>)</span> { <span class="keyword">await</span> CreateDialog(Dialog, awaitPreviousDialog); }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">CreateContentDialogAsync</span>(<span class="params">ContentDialog Dialog, <span class="built_in">bool</span> awaitPreviousDialog</span>)</span> { <span class="keyword">await</span> CreateDialog(Dialog, awaitPreviousDialog); }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ActiveDialog_Closed</span>(<span class="params">ContentDialog sender, ContentDialogClosedEventArgs args</span>)</span> { DialogAwaiter.SetResult(<span class="literal">true</span>); }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="built_in">string</span> text</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">await</span> DialogUtil.CreateContentDialogAsync(<span class="keyword">new</span> ContentDialog</span><br><span class="line">        {</span><br><span class="line">            Title = <span class="string">"Info"</span>,</span><br><span class="line">            Content = <span class="keyword">new</span> TextBlock</span><br><span class="line">            {</span><br><span class="line">                Text = text,</span><br><span class="line">                TextWrapping = TextWrapping.Wrap</span><br><span class="line">            },</span><br><span class="line">            PrimaryButtonText = <span class="string">"好的"</span></span><br><span class="line">        }, awaitPreviousDialog: <span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">CreateDialog</span>(<span class="params">ContentDialog Dialog, <span class="built_in">bool</span> awaitPreviousDialog</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        <span class="keyword">if</span> (ActiveDialog != <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (awaitPreviousDialog)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">await</span> DialogAwaiter.Task;</span><br><span class="line">                DialogAwaiter = <span class="keyword">new</span> TaskCompletionSource&lt;<span class="built_in">bool</span>&gt;();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> ActiveDialog.Hide();</span><br><span class="line">        }</span><br><span class="line">        ActiveDialog = Dialog;</span><br><span class="line">        ActiveDialog.Closed += ActiveDialog_Closed;</span><br><span class="line">        <span class="keyword">await</span> ActiveDialog.ShowAsync();</span><br><span class="line">        ActiveDialog.Closed -= ActiveDialog_Closed;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">``</span><br><span class="line"></span><br><span class="line"><span class="meta">## 文件读写</span></span><br><span class="line"></span><br><span class="line">UWP文件读写功能又被限制，一般是只能读写App本地文件夹，还可以请求诸如图片库、视频库等库文件夹，要是想要访问任意文件的话，就需要更改`Package.appxmanifest`了。因为本App需要序列化文件列表及其参数，恰好要用到本地文件读写。具体操作的话可以查看VS的代码提示或 [文档](https:<span class="comment">//docs.microsoft.com/en-us/windows/uwp/files/quickstart-reading-and-writing-files)。</span></span><br><span class="line">``` cs</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> StorageFolder localFolder = ApplicationData.Current.LocalFolder;</span><br><span class="line"><span class="comment">//读文件</span></span><br><span class="line">StorageFile file = <span class="keyword">await</span> localFolder.CreateFileAsync(jsonFile, CreationCollisionOption.OpenIfExists);</span><br><span class="line"><span class="built_in">string</span> JSONContent = <span class="keyword">await</span> FileIO.ReadTextAsync(file);</span><br><span class="line"><span class="comment">//写文件</span></span><br><span class="line"><span class="built_in">string</span> configJson = JsonConvert.SerializeObject(dj);</span><br><span class="line">StorageFile file = <span class="keyword">await</span> localFolder.CreateFileAsync(jsonFile, CreationCollisionOption.OpenIfExists);</span><br><span class="line"><span class="keyword">await</span> FileIO.WriteTextAsync(file, configJson);</span><br></pre></td></tr></tbody></table></figure>
<h2 id="终止线程">终止线程</h2>
<p>调用<code>thread.Abort()</code>可能不会立即终止线程，甚至可能永远不会终止。 下方代码就出现了此问题，可以将<code>serverRun</code>置为<code>false</code>以终止该线程。</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line">serverThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(PipeServerThread));</span><br><span class="line">serverThread.Start();</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PipeServerThread</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">    <span class="keyword">while</span> (serverRun)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (!server.IsConnected)</span><br><span class="line">        {</span><br><span class="line">            server.Disconnect();</span><br><span class="line">            LoggingManager.Info(<span class="string">"Disconnected from FancyToys, waiting for its reconnection."</span>);</span><br><span class="line">            server.WaitForConnection();</span><br><span class="line">            LoggingManager.Info(<span class="string">"FancyToys reconnected"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">string</span> message = reader.ReadLine();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(message))</span><br><span class="line">        {</span><br><span class="line">            MessageManager.Receive(message);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="更换主题">更换主题</h2>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/34554871/changing-theme-in-windows-10-uwp-app-programmatically">Changing Theme in Windows 10 UWP App Programmatically</a></li>
</ul>
<h2 id="localsettings添加enum类型的值">LocalSettings添加enum类型的值</h2>
<div class="note danger">
            <p>System.ArgumentException: '参数错误。 Error trying to write application data container value'</p>
          </div>
<p>解决方式是在写入LocalSettings前和读取LocalSettings之后进行一个string和enum的转换</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> LogType LogLevel</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">set</span></span><br><span class="line">    {</span><br><span class="line">        ApplicationData.Current.LocalSettings.Values[<span class="string">"LogLevel"</span>] = <span class="keyword">value</span>.ToString();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">get</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (ApplicationData.Current.LocalSettings.Values.TryGetValue(<span class="string">"LogLevel"</span>, <span class="keyword">out</span> <span class="built_in">object</span> val))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> ParseEnum&lt;LogType&gt;(val <span class="keyword">as</span> <span class="built_in">string</span>);</span><br><span class="line">        }</span><br><span class="line">        _ = MessageDialog.Error(<span class="string">"Error while setting Log Level"</span>, <span class="string">"Setting not found."</span>);</span><br><span class="line">        <span class="keyword">return</span> LogType.Info;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function">T <span class="title">ParseEnum</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (T)Enum.Parse(<span class="keyword">typeof</span>(T), <span class="keyword">value</span>.ToString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://stackoverflow.com/questions/12748944/how-to-save-an-enumeration-into-applicationdata-current-localsettings">How to save an enumeration into ApplicationData.Current.LocalSettings</a></p>
<h2 id="xaml值绑定">xaml值绑定</h2>
<p>绑定模式： + OneTime: 绑定创建时更新（Page 或 User Control 的 Loading 事件中初始化，只更新一次） + OneWay: 绑定源更改，绑定目标随之更新 + TwoWay: 源和目标双向更新</p>
<p>对于OneWay模式，当源更改时并不能及时更新，源需要实现<code>INotifyPropertyChanged</code>接口， 或者直接调用<code>this.Bindings.Update()</code>以获取更新。</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ServerPage</span> : <span class="title">Page</span>, <span class="title">INotifyPropertyChanged</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 实现INotifyPropertyChanged接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">double</span> logPanelOpacity = SettingsClerk.Clerk.STLogPanelOpacity;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">double</span> LogPanelOpacity {</span><br><span class="line">        <span class="keyword">get</span> =&gt; logPanelOpacity;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        {</span><br><span class="line">            logPanelOpacity = <span class="keyword">value</span>;</span><br><span class="line">            RaisePropertyChanged(<span class="string">"LogPanelOpacity"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RaisePropertyChanged</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    {</span><br><span class="line">        PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(name));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    SettingsClerk.Clerk.OpacityChanged += () =&gt;</span><br><span class="line">    {</span><br><span class="line">        LogPanelOpacity = SettingsClerk.Clerk.STLogPanelOpacity;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.Bindings.Update(); 调用页面的Update方法</span></span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考-3">参考</h3>
<p><a href="https://www.cnblogs.com/wpinfo/p/xbind.html">UWP: 掌握编译型绑定 x:Bind</a> <a href="https://stackoverflow.com/questions/37398038/difference-between-binding-and-xbind">Difference between Binding and x:Bind</a> <a href="https://stackoverflow.com/questions/33070705/with-compiled-bindings-xbind-why-do-i-have-to-call-bindings-update">With compiled bindings (x:bind), why do I have to call Bindings.Update()?</a> <a href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.data.bindingmode?view=winrt-19041">BindingMode Enum</a> <a href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.data.inotifypropertychanged.propertychanged?view=winrt-19041">INotifyPropertyChanged.PropertyChanged Event</a></p>
<h2 id="属性的封装与access-violation">属性的封装与"Access violation"</h2>
<div class="note danger">
            <p>程序“[xxxxx] FancyToys.exe”已退出，返回值为 -1073741819 (0xc0000005) 'Access violation'。</p>
          </div>
<p>对C#语法不甚了解，才出现了这个“闹剧”。使用下方代码对Page赋值的时候，出现该错误，封装私有字段后，问题解决。</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SettingsPage Page</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span> =&gt; Page = <span class="keyword">value</span>;</span><br><span class="line">    <span class="keyword">get</span> =&gt; Page;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 自动属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SettingsPage Page { <span class="keyword">private</span> <span class="keyword">set</span>; <span class="keyword">get</span>; }</span><br></pre></td></tr></tbody></table></figure>
<h2 id="datagridobservablecollection-排序">DataGrid、ObservableCollection 排序</h2>
<p>DataGrid的排序 要设置<code>CanUserSortColumns="True" Sorting="ProcessGrid_Sorting"</code>属性， 分别对待排序的列进行处理。如果某列未排序或者是降序，就要变为升序，反之为降序。排序后设置Header的箭头 （<code>Ascending/Descending</code>）并清除其他列的排序箭头 将ObservableCollection转为List，排序后再装入到原来的ObservableCollection。</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessGrid_Sorting</span>(<span class="params"><span class="built_in">object</span> sender, DataGridColumnEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(e.Column.Header.ToString())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Process"</span>:</span><br><span class="line">            <span class="keyword">if</span> (e.Column.SortDirection == <span class="literal">null</span> || e.Column.SortDirection == DataGridSortDirection.Descending)</span><br><span class="line">            {</span><br><span class="line">                SortData((x, y) =&gt; x.Process.CompareTo(y.Process));</span><br><span class="line">                e.Column.SortDirection = DataGridSortDirection.Ascending;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                SortData((x, y) =&gt; -x.Process.CompareTo(y.Process));</span><br><span class="line">                e.Column.SortDirection = DataGridSortDirection.Descending;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> dc <span class="keyword">in</span> ProcessGrid.Columns)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (dc.Header.ToString() != e.Column.Header.ToString())</span><br><span class="line">        {</span><br><span class="line">            dc.SortDirection = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SortData</span>(<span class="params">Comparison&lt;ProcessInformation&gt; comparison</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> sortableList = <span class="keyword">new</span> List&lt;ProcessInformation&gt;(InfoList);</span><br><span class="line">    sortableList.Sort(comparison);</span><br><span class="line">    InfoList.Clear();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> pi <span class="keyword">in</span> sortableList)</span><br><span class="line">    {</span><br><span class="line">        InfoList.Add(pi);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong>参考</strong></p>
<p><a href="https://stackoverflow.com/questions/19112922/sort-observablecollectionstring-through-c-sharp">Sort ObservableCollection<string> through C#</string></a></p>
<h1 id="fancyserver">FancyServer</h1>
<h2 id="主要工作和项目结构">主要工作和项目结构</h2>
<p>前后端通过管道通信……</p>
<pre class="mermaid" style="text-align: center;">            stateDiagram-v2
            PipeBridge --&gt; MessageManager: Message
MessageManager --&gt; PipeBridge: Message

MessageManager --&gt; ActionManager: Action
ActionManager --&gt; NoForm: action
NoForm --&gt; ActionManager: action
NoForm --&gt; LoggingManager: log
ActionManager --&gt; MessageManager: Action
ActionManager --&gt; LoggingManager: log

MessageManager --&gt; NurseryManager: Nursery
NurseryManager --&gt; ProcessManager: Process
NurseryManager --&gt; LoggingManager: log
ProcessManager --&gt; NurseryManager: Information
ProcessManager --&gt; LoggingManager: log
NurseryManager --&gt; MessageManager: Nursery

MessageManager --&gt; SettingManager: Setting
SettingManager --&gt; ActionManager: settings
SettingManager --&gt; MessageManager: Setting
SettingManager --&gt; LoggingManager: settings, log

LoggingManager --&gt; MessageManager: Logging

          </pre>
<h2 id="笔记">笔记</h2>
<h3 id="为uwp和win32建立管道">为UWP和win32建立管道</h3>
<h3 id="switch-判断对象-type">switch 判断对象 Type</h3>
<p>C#自v7.0支持模式匹配，否则需要一连串的<code>if else</code> 用 <code>is</code> 关键字判断传入类型。此外， <code>typeof</code>关键字、<code>object.GetType()</code>也可以对对象进行类型判断，但不如原生语法灵活。 在<a href="https://stackoverflow.com/questions/9802325/switch-case-and-generics-checking">StackOverflow</a> 中介绍了其他的类型判断方式。</p>
<figure class="highlight csharp"><figcaption><span>switch判断传入对象类型</span><a href="https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching#conclusions">模式匹配 highlight</a></figcaption><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">object</span> sdu</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    MessageStruct? pdu = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">switch</span> (sdu) </span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">case</span> ActionStruct ass:</span><br><span class="line">            pdu = PDU(MessageType.action, JsonConvert.SerializeObject(ass));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LoggingStruct ls:</span><br><span class="line">            pdu = PDU(MessageType.logging, JsonConvert.SerializeObject(ls));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> NurseryStruct ns:</span><br><span class="line">            pdu = PDU(MessageType.nursery, JsonConvert.SerializeObject(ns));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> SettingStruct ss:</span><br><span class="line">            pdu = PDU(MessageType.setting, JsonConvert.SerializeObject(ss));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            LoggingManager.Error(<span class="string">"Invalid message SDU type"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (pdu != <span class="literal">null</span>)</span><br><span class="line">    {</span><br><span class="line">        PipeMessenger.Post(JsonConvert.SerializeObject(pdu));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="修改托盘图标菜单样式">修改托盘图标菜单样式</h3>
<p><a href="https://stackoverflow.com/questions/15926377/change-the-backcolor-of-the-toolstripseparator-control">Stackoverflow</a></p>
<figure>
<img src="/2020/09/30/fancy-toys-notes/GrayBackColor.jpg" alt="注意阴影"><figcaption>注意阴影</figcaption>
</figure>
<p>大多软件的托盘图标菜单都是纯白的，ContextMenuStrip的默认样式与之相比有点过时，这里需要修改 MenuItem的BackColor属性，但是ToolMenuStripSeparator的BackColor属性在渲染的时候被忽略（或覆盖）了， 需要在separator的Paint事件上加点料：</p>
<figure class="highlight cs"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mnuToolStripSeparator_Custom_Paint</span> (<span class="params">Object sender, PaintEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    ToolStripSeparator sep = (ToolStripSeparator)sender;</span><br><span class="line"></span><br><span class="line">    e.Graphics.FillRectangle(<span class="keyword">new</span> SolidBrush(CUSTOM_COLOR_BACKGROUND), <span class="number">0</span>, <span class="number">0</span>, sep.Width, sep.Height);</span><br><span class="line"></span><br><span class="line">    e.Graphics.DrawLine(<span class="keyword">new</span> Pen(CUSTOM_COLOR_FOREGROUND), <span class="number">30</span>, sep.Height / <span class="number">2</span>, sep.Width - <span class="number">4</span>, sep.Height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="contextmenustrip的部分结构">ContextMenuStrip的部分结构</h3>
<p>遍历 <code>ToolStripMenuItem.DropDownItems</code> 时要区分 <code>ToolStripSeparator</code> 和 <code>ToolStripDropDownItem</code> 类型</p>
<pre class="mermaid" style="text-align: center;">            stateDiagram-v2
            ContextMenuStrip --&gt; ToolStripMenuItem
ToolStripMenuItem --&gt; DropDownItems(ToolStripItemCollection)
state DropDownItems(ToolStripItemCollection) {
    ToolStripItem --&gt; ToolStripSeparator
    ToolStripItem --&gt; ToolStripDropDownItem
}
          </pre>
<h2 id="obsolete-notes">Obsolete notes</h2>
<h3 id="父进程退出后子进程不退出端口不释放">父进程退出后（子进程不退出）端口不释放</h3>
<div class="note info">
            <p>这个问题出自原来的“NurseryLauncher”，现在提供win32服务的是"FancyServer"。与前者相比， 后者结构更加清晰，功能也更加完善。</p>
          </div>
<p><code>NurseryLauncher.exe</code>（绑定626端口）启动 <code>puppet.exe</code>（80端口）后，再手动关闭<code>NurseryLauncher.exe</code>， 从下图可以看出，根据端口查看进程，有pid存在，但是没有该进程。查子进程<code>puppet.exe</code>一切正常。这样导致的问题是：下次<code>NurseryLauncher.exe</code>因为端口占用不能正常启动 <img src="https://github-pages-1253649638.cos.ap-beijing.myqcloud.com/post-images/2020/2020-10-03%20%E7%88%B6%E8%BF%9B%E7%A8%8B%E9%80%80%E5%87%BA%E4%B8%8D%E9%87%8A%E6%94%BE%E7%AB%AF%E5%8F%A3.jpg" class="" title="父进程退出但没有释放端口"></p>
]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>C#</tag>
        <tag>UWP</tag>
      </tags>
  </entry>
</search>
